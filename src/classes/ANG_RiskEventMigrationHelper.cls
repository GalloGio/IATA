public with sharing class ANG_RiskEventMigrationHelper {
	
	public Set<Account> accountsToUpdated;
	Map<string, Agency_Applied_Change_code__c> risksToWithdraw;
	Map<string, ANG_Agency_Risk_Event__c> risksToInsert;

	public ANG_RiskEventMigrationHelper(Set<Account> accs) {
		accountsToUpdated = accs;
		risksToWithdraw = new Map<string, Agency_Applied_Change_code__c>();
		risksToInsert = new Map<string, ANG_Agency_Risk_Event__c>();
	}

    public List<ANG_Agency_Risk_Event__c> convertChangeCodesToRiskEvents(){
    	
    	Map<String,ANG_Risk_Event_Type__c> mapRiskEventTypes = new Map<String,ANG_Risk_Event_Type__c>();
    	for(ANG_Risk_Event_Type__c ret: [SELECT Name, Id,ANG_Risk_ID__c  from ANG_Risk_Event_Type__c]){
    		mapRiskEventTypes.put(ret.Name,ret);
    	}

    	for(Agency_Applied_Change_code__c a :  [Select Change_Code__c, Created_Date_To_Show__c, Reason_Code__c,Reason_Description__c,Irregularity_Type__c,PreviousReason__c,SIDRA_Case__c,OSCAR__c, Bulletin_Information__c,Account__c,Account__r.Location_Type__c  from Agency_Applied_Change_code__c where Account__c in :accountsToUpdated]){
    		
    		ANG_Agency_Risk_Event__c reToAdd = new ANG_Agency_Risk_Event__c(
                                        ANG_Issued_Date__c  = date.newinstance(a.Created_Date_To_Show__c.year(), a.Created_Date_To_Show__c.month(), a.Created_Date_To_Show__c.day()) , 
                                        ANG_ChangeCode__c   = a.id, 
                                        ANG_AccountId__c    = a.Account__c,
                                        ANG_OscarId__c      = a.OSCAR__c,
                                        ANG_CaseId__c       = a.SIDRA_Case__c,
                                        ANG_Event_Status__c = ANG_Risk_Helper.STATUS_MIGRATED,
										ANG_Created_from__c = 'Agency_Applied_Change_code__c',
										ANG_UniqueKey__c    = (a.SIDRA_Case__c != null ? a.SIDRA_Case__c : (a.OSCAR__C != null ? a.OSCAR__c : a.id))
                                    );
    		
			if(isAuthCashPayment(a)){	
				reToAdd.ANG_UniqueKey__c   += mapRiskEventTypes.get(ANG_Risk_Helper.RISK_TYPE_AUTH_CASH_PAYMENT).ANG_Risk_ID__c;
				reToAdd.ANG_Risk_Type__c    = mapRiskEventTypes.get(ANG_Risk_Helper.RISK_TYPE_AUTH_CASH_PAYMENT).id;
				risksToInsert.put( ANG_Risk_Helper.CHANGE_CODE_FIN +a.Id+a.SIDRA_Case__c,reToAdd);  
			}
			else if(isLateShortPayment(a)){
				reToAdd.ANG_UniqueKey__c   += mapRiskEventTypes.get(ANG_Risk_Helper.RISK_TYPE_LATE_SHORT_PAYMENT).ANG_Risk_ID__c;
				reToAdd.ANG_Risk_Type__c    = mapRiskEventTypes.get(ANG_Risk_Helper.RISK_TYPE_LATE_SHORT_PAYMENT).id;
			    risksToInsert.put(ANG_Risk_Helper.CHANGE_CODE_IRR +a.Id+a.SIDRA_Case__c, reToAdd);
			}
			
			else if(isCommonOwnershipDefault(a)){//Changed order to pass before payment default
				reToAdd.ANG_UniqueKey__c   += mapRiskEventTypes.get(ANG_Risk_Helper.RISK_TYPE_COMMON_OWNERSHIP_DEFAULT).ANG_Risk_ID__c;
				reToAdd.ANG_Risk_Type__c    = mapRiskEventTypes.get(ANG_Risk_Helper.RISK_TYPE_COMMON_OWNERSHIP_DEFAULT).id;
			    risksToInsert.put(ANG_Risk_Helper.CHANGE_CODE_RCR +a.Id+a.SIDRA_Case__c, reToAdd);
			}

			else if(isPaymentDefault(a)){
				reToAdd.ANG_UniqueKey__c   += mapRiskEventTypes.get(ANG_Risk_Helper.RISK_TYPE_PAYMENT_DEFAULT).ANG_Risk_ID__c;
				reToAdd.ANG_Risk_Type__c    = mapRiskEventTypes.get(ANG_Risk_Helper.RISK_TYPE_PAYMENT_DEFAULT).id;
			    risksToInsert.put(ANG_Risk_Helper.CHANGE_CODE_RCR +a.Id+a.SIDRA_Case__c, reToAdd);
			}  
			
			else if(isFailFinancialStatements(a)){
				reToAdd.ANG_UniqueKey__c   += mapRiskEventTypes.get(ANG_Risk_Helper.RISK_TYPE_FAIL_FINANCIAL_STATEMENTS).ANG_Risk_ID__c;
				reToAdd.ANG_Risk_Type__c    = mapRiskEventTypes.get(ANG_Risk_Helper.RISK_TYPE_FAIL_FINANCIAL_STATEMENTS).id;
			    risksToInsert.put(ANG_Risk_Helper.CHANGE_CODE_NOT +a.Id+a.SIDRA_Case__c, reToAdd);
			}  
			
			else if(isMajorchange1(a)){
				reToAdd.ANG_UniqueKey__c    = date.today().format() + a.id + mapRiskEventTypes.get(ANG_Risk_Helper.RISK_TYPE_MAJOR_CHANGE).ANG_Risk_ID__c;
				reToAdd.ANG_Risk_Type__c    = mapRiskEventTypes.get(ANG_Risk_Helper.RISK_TYPE_MAJOR_CHANGE).id;
			    risksToInsert.put(ANG_Risk_Helper.CHANGE_CODE_MCF +a.Id+a.SIDRA_Case__c, reToAdd);
			}  
			
			else if(isMajorchange2(a)){
				reToAdd.ANG_UniqueKey__c    = date.today().format() + a.id + mapRiskEventTypes.get(ANG_Risk_Helper.RISK_TYPE_MAJOR_CHANGE).ANG_Risk_ID__c;
				reToAdd.ANG_Risk_Type__c    = mapRiskEventTypes.get(ANG_Risk_Helper.RISK_TYPE_MAJOR_CHANGE).id;
			    risksToInsert.put(ANG_Risk_Helper.CHANGE_CODE_MCF +a.Id+a.SIDRA_Case__c, reToAdd);
			}
			
			else if(isUnreportedChange(a)){
				reToAdd.ANG_UniqueKey__c   += mapRiskEventTypes.get(ANG_Risk_Helper.RISK_TYPE_UNREPORTED_CHANGE).ANG_Risk_ID__c;
				reToAdd.ANG_Risk_Type__c    = mapRiskEventTypes.get(ANG_Risk_Helper.RISK_TYPE_UNREPORTED_CHANGE).id;
			    risksToInsert.put(ANG_Risk_Helper.CHANGE_CODE_NOT +a.Id+a.SIDRA_Case__c, reToAdd);
			}
			
			else if(isFailFinancialSecurity1(a)){
				reToAdd.ANG_UniqueKey__c   += mapRiskEventTypes.get(ANG_Risk_Helper.RISK_TYPE_FAIL_FINANCIAL_SECURITY).ANG_Risk_ID__c;
				reToAdd.ANG_Risk_Type__c    = mapRiskEventTypes.get(ANG_Risk_Helper.RISK_TYPE_FAIL_FINANCIAL_SECURITY).id;
			    risksToInsert.put(ANG_Risk_Helper.CHANGE_CODE_RVW +a.Id+a.SIDRA_Case__c, reToAdd);
			}
			
			else if(isFailFinancialSecurity2(a)){
				reToAdd.ANG_UniqueKey__c   += mapRiskEventTypes.get(ANG_Risk_Helper.RISK_TYPE_FAIL_FINANCIAL_SECURITY).ANG_Risk_ID__c;
				reToAdd.ANG_Risk_Type__c    = mapRiskEventTypes.get(ANG_Risk_Helper.RISK_TYPE_FAIL_FINANCIAL_SECURITY).id;
			    risksToInsert.put(ANG_Risk_Helper.CHANGE_CODE_RVW +a.Id+a.SIDRA_Case__c, reToAdd);
			}
			
			else if(isPrejudicedCollection(a)){
				reToAdd.ANG_UniqueKey__c   += mapRiskEventTypes.get(ANG_Risk_Helper.RISK_TYPE_PREJUDICED_COLLECTION).ANG_Risk_ID__c; 
				reToAdd.ANG_Risk_Type__c    = mapRiskEventTypes.get(ANG_Risk_Helper.RISK_TYPE_PREJUDICED_COLLECTION).id;
			    risksToInsert.put(ANG_Risk_Helper.CHANGE_CODE_RVW +a.Id+a.SIDRA_Case__c, reToAdd);
			}
			
			else //else, confirm if this is a reg to withdraw
				removeWithdrawal(a); 
    	}
    	return risksToInsert.values();
    }


	public boolean isAuthCashPayment(Agency_Applied_Change_code__c aacc){
		system.debug('isAuthCashPayment: ');
		if (aacc.Change_Code__c == ANG_Risk_Helper.CHANGE_CODE_FIN  && aacc.Account__r.Location_Type__c == AMS_Utils.HE)
			return true;

		return false;
	}
	
	public boolean isLateShortPayment(Agency_Applied_Change_code__c aacc){
		system.debug('isLateShortPayment');
		if (aacc.Change_Code__c == ANG_Risk_Helper.CHANGE_CODE_IRR  
			&& aacc.Account__r.Location_Type__c == AMS_Utils.HE 
			&& (aacc.Irregularity_Type__c == ANG_Risk_Helper.CHANGE_CODE_IRR_OV1
				|| aacc.Irregularity_Type__c == ANG_Risk_Helper.CHANGE_CODE_IRR_OV2)
			)

				//IF EXISTS IRW, IGNORE IRR
				if(!risksToWithdraw.containsKey(ANG_Risk_Helper.CHANGE_CODE_IRW + aacc.Account__c + aacc.SIDRA_Case__c))		 
					return true;
		
		return false;
	}

	public boolean isPaymentDefault(Agency_Applied_Change_code__c aacc){
		system.debug('isPaymentDefault');
		if (aacc.Change_Code__c == ANG_Risk_Helper.CHANGE_CODE_RCR  
			&& aacc.Account__r.Location_Type__c == AMS_Utils.HE
			&& (aacc.PreviousReason__c == null 
				|| aacc.PreviousReason__c == ''
				||( !aacc.PreviousReason__c.contains('50') 
					&& !aacc.PreviousReason__c.contains('53')
				   )
				)
			)
				return true;

		return false;
	}

	public boolean isFailFinancialStatements(Agency_Applied_Change_code__c aacc){
		system.debug('isFailFinancialStatements');
		if (aacc.Change_Code__c == ANG_Risk_Helper.CHANGE_CODE_NOT  
			&& aacc.Reason_Code__c == '61' 
			&& aacc.Reason_Description__c == ANG_Risk_Helper.CHANGE_CODE_DESCRIPTION_NCFC
			&& aacc.Account__r.Location_Type__c == AMS_Utils.HE){

				//IF EXISTS IRW, IGNORE IRR
				if(!risksToWithdraw.containsKey(ANG_Risk_Helper.CHANGE_CODE_NTW + aacc.Account__c + aacc.SIDRA_Case__c)
					&&!risksToWithdraw.containsKey(ANG_Risk_Helper.CHANGE_CODE_RVW  + aacc.Account__c + aacc.SIDRA_Case__c)
					&&!risksToWithdraw.containsKey(ANG_Risk_Helper.CHANGE_CODE_NTW + aacc.Account__c + aacc.OSCAR__c)
					&&!risksToWithdraw.containsKey(ANG_Risk_Helper.CHANGE_CODE_RVW  + aacc.Account__c + aacc.OSCAR__c))		 
					return true;  
		}

		return false;
	}

	public boolean isMajorchange1(Agency_Applied_Change_code__c aacc){
		system.debug('isMajorchange1');
		if (aacc.Change_Code__c == ANG_Risk_Helper.CHANGE_CODE_MCF  
			|| aacc.Change_Code__c == ANG_Risk_Helper.CHANGE_CODE_CCF
			|| aacc.Change_Code__c == ANG_Risk_Helper.CHANGE_CODE_CHF
			|| aacc.Change_Code__c == ANG_Risk_Helper.CHANGE_CODE_CNF
			|| aacc.Change_Code__c == ANG_Risk_Helper.CHANGE_CODE_CSF)
				return true;

		return false;
	}	

	public boolean isMajorchange2(Agency_Applied_Change_code__c aacc){
		system.debug('isMajorchange2');
		if (aacc.Change_Code__c == ANG_Risk_Helper.CHANGE_CODE_MCF 
			&& (aacc.Bulletin_Information__c.toUpperCase().contains('MAJOR')
				|| aacc.Bulletin_Information__c.toUpperCase().contains('OWNERSHIP')
				|| aacc.Bulletin_Information__c.toUpperCase().contains('LEGAL')
				)
			)
				return true;

		return false;
	}

	public boolean isUnreportedChange(Agency_Applied_Change_code__c aacc){
		system.debug('isUnreportedChange');
		if (aacc.Change_Code__c == ANG_Risk_Helper.CHANGE_CODE_NOT 
			&& aacc.Reason_Code__c == '60' 
			&& aacc.Reason_Description__c == ANG_Risk_Helper.CHANGE_CODE_DESCRIPTION_NCAC
			&& aacc.Account__r.Location_Type__c == AMS_Utils.HE)
				return true;

		return false;
	}

	public boolean isFailFinancialSecurity1(Agency_Applied_Change_code__c aacc){
		system.debug('isFailFinancialSecurity1');
		if (aacc.Change_Code__c == ANG_Risk_Helper.CHANGE_CODE_RVW 
			&& aacc.Reason_Code__c == '61' 
			&& aacc.Reason_Description__c == ANG_Risk_Helper.CHANGE_CODE_DESCRIPTION_NCFC
			&& aacc.Account__r.Location_Type__c == AMS_Utils.HE)
				return true;

		return false;
	}

	public boolean isFailFinancialSecurity2(Agency_Applied_Change_code__c aacc){
		system.debug('isFailFinancialSecurity2');
		if (aacc.Change_Code__c == ANG_Risk_Helper.CHANGE_CODE_RVW 
			&& aacc.Reason_Code__c == 'Review' 
			&& aacc.Reason_Description__c == ANG_Risk_Helper.CHANGE_CODE_DESCRIPTION_FINANCIAL_REVIEW
			&& aacc.Account__r.Location_Type__c == AMS_Utils.HE
			&& aacc.Bulletin_Information__c.contains('bank')
			)
				return true;

		return false;
	}

	public boolean isCommonOwnershipDefault(Agency_Applied_Change_code__c aacc){
		system.debug('isCommonOwnershipDefault');
		if (aacc.Change_Code__c == ANG_Risk_Helper.CHANGE_CODE_RCR 
			&& aacc.Account__r.Location_Type__c == AMS_Utils.HE
			&& (aacc.PreviousReason__c != null
				&& aacc.PreviousReason__c.contains('54'))
			)
				return true;

		return false;
	}

	public boolean isPrejudicedCollection(Agency_Applied_Change_code__c aacc){
		system.debug('isPrejudicedCollection');
		if (aacc.Change_Code__c == ANG_Risk_Helper.CHANGE_CODE_RVW 
			&& aacc.Reason_Code__c == '63' 
			&& aacc.Reason_Description__c == ANG_Risk_Helper.CHANGE_CODE_DESCRIPTION_PREJUDICED_COLLECTION
			&& aacc.Account__r.Location_Type__c == AMS_Utils.HE
			&& ( aacc.PreviousReason__c != null
				&& aacc.PreviousReason__c.contains('54'))
			)
				return true;

		return false;
	}


	/*if is a withdraw, 
		remove if already had been added to the list of risksToInsert
			   or add to the list of withdraws for future risks events been withdraw*/
	public void removeWithdrawal(Agency_Applied_Change_code__c aacc){

//------------------------------FOR LATE/SHORT PAYMENT--------------------------
		if (aacc.Change_Code__c == ANG_Risk_Helper.CHANGE_CODE_IRW){
			if(risksToInsert.containsKey(ANG_Risk_Helper.CHANGE_CODE_IRR +aacc.Account__c+aacc.SIDRA_Case__c))
				risksToInsert.remove(ANG_Risk_Helper.CHANGE_CODE_IRR +aacc.Account__c+aacc.SIDRA_Case__c);
			else
				risksToWithdraw.put(ANG_Risk_Helper.CHANGE_CODE_IRW +aacc.Account__c+aacc.SIDRA_Case__c, aacc);
		}


//-----------------------------FOR FAIL FINANCIAL  STATMENTS---------------------
		else if (aacc.Change_Code__c == ANG_Risk_Helper.CHANGE_CODE_NTW){
			if(risksToInsert.containsKey(ANG_Risk_Helper.CHANGE_CODE_NOT +aacc.Account__c+aacc.SIDRA_Case__c))
				risksToInsert.remove(ANG_Risk_Helper.CHANGE_CODE_NOT +aacc.Account__c+aacc.SIDRA_Case__c);
			else
				risksToWithdraw.put(ANG_Risk_Helper.CHANGE_CODE_NTW +aacc.Account__c+aacc.SIDRA_Case__c, aacc);

			if(risksToInsert.containsKey(ANG_Risk_Helper.CHANGE_CODE_NOT +aacc.Account__c+aacc.OSCAR__c))
				risksToInsert.remove(ANG_Risk_Helper.CHANGE_CODE_NOT +aacc.Account__c+aacc.OSCAR__c);
			else
				risksToWithdraw.put(ANG_Risk_Helper.CHANGE_CODE_NTW +aacc.Account__c+aacc.OSCAR__c, aacc);
		}

		else if (aacc.Change_Code__c == ANG_Risk_Helper.CHANGE_CODE_RVW){
			if(risksToInsert.containsKey(ANG_Risk_Helper.CHANGE_CODE_NOT +aacc.Account__c+aacc.SIDRA_Case__c))
				risksToInsert.remove(ANG_Risk_Helper.CHANGE_CODE_NOT +aacc.Account__c+aacc.SIDRA_Case__c);
			else
				risksToWithdraw.put(ANG_Risk_Helper.CHANGE_CODE_RVW +aacc.Account__c+aacc.SIDRA_Case__c, aacc);

			if(risksToInsert.containsKey(ANG_Risk_Helper.CHANGE_CODE_NOT +aacc.Account__c+aacc.OSCAR__c))
				risksToInsert.remove(ANG_Risk_Helper.CHANGE_CODE_NOT +aacc.Account__c+aacc.OSCAR__c);
			else
				risksToWithdraw.put(ANG_Risk_Helper.CHANGE_CODE_RVW +aacc.Account__c+aacc.OSCAR__c, aacc);
		}

	}

}