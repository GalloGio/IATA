//
// Generated by JSON2Apex http://json2apex.herokuapp.com/
//

public class IDCard_RenewalRequest {

	public class Payment {
		public Double amount {get;set;}
		public Double discount {get;set;} 
		public String orderDate {get;set;} 
		public String cur {get;set;} 
		public String cardNumber {get;set;} 
		public String promotionCode {get;set;} 
		public String transactionNumber {get;set;} 

		public Payment(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'amount') {
							amount = parser.getDoubleValue();
						} else if (text == 'discount') {
							discount = parser.getDoubleValue();
						} else if (text == 'date') {
							orderDate = parser.getText();
						} else if (text == 'currency') {
							cur = parser.getText();
						} else if (text == 'cardNumber') {
							cardNumber = parser.getText();
						} else if (text == 'promotionCode') {
							promotionCode = parser.getText();
						} else if (text == 'transactionNumber') {
							transactionNumber = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Payment consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public String orderId {get;set;} 
	public String created {get;set;} 
	public String typeOfCard {get;set;} 
	public List<Items> items {get;set;} 
	public Payment payment {get;set;} 
	public SpecializationFields specializationFields {get;set;} 

	public IDCard_RenewalRequest(JSONParser parser) {
		while (parser.nextToken() != System.JSONToken.END_OBJECT) {
			if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
				String text = parser.getText();
				if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
					if (text == 'orderId') {
						orderId = parser.getText();
					} else if (text == 'created') {
						created = parser.getText();
					} else if (text == 'typeOfCard') {
						typeOfCard = parser.getText();
					} else if (text == 'items') {
						items = arrayOfItems(parser);
					} else if (text == 'payment') {
						payment = new Payment(parser);
					} else if (text == 'specializationFields') {
						specializationFields = new SpecializationFields(parser);
					} else {
						System.debug(LoggingLevel.WARN, 'IDCard_RenewalRequest consuming unrecognized property: '+text);
						consumeObject(parser);
					}
				}
			}
		}
	}
	
	public class Items {
		public String id {get;set;} 
		public String description {get;set;} 
		public Integer quantity {get;set;} 
		public Double price {get;set;} 
		public String training {get;set;} 

		public Items(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'id') {
							id = parser.getText();
						} else if (text == 'description') {
							description = parser.getText();
						} else if (text == 'quantity') {
							quantity = parser.getIntegerValue();
						} else if (text == 'price') {
							price = parser.getDoubleValue();
						} else if (text == 'training') {
							training = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Items consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class SpecializationFields {
		public String ASF_Current_Function {get;set;} 
		public String ASF_Percentage_of_Annual_Booking {get;set;} 
		public String ASF_Market_Specialization {get;set;} 
		public String ASF_Market_Specialization_Comment {get;set;} 
		public String ASF_Market_Focus {get;set;} 
		public String ASF_Specializing_on_Destination {get;set;} 
		public String ASF_Completed_Travel_Courses {get;set;} 
		public String ASF_Last_Completed_Travel_Course {get;set;} 
		public String ASF_FAM_Trips {get;set;} 

		public SpecializationFields(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'ASF_Current_Function__c') {
							ASF_Current_Function = parser.getText();
						} else if (text == 'ASF_Percentage_of_Annual_Booking__c') {
							ASF_Percentage_of_Annual_Booking = parser.getText();
						} else if (text == 'ASF_Market_Specialization__c') {
							ASF_Market_Specialization = parser.getText();
						} else if (text == 'ASF_Market_Specialization_Comment__c') {
							ASF_Market_Specialization_Comment = parser.getText();
						} else if (text == 'ASF_Market_Focus__c') {
							ASF_Market_Focus = parser.getText();
						} else if (text == 'ASF_Specializing_on_Destination__c') {
							ASF_Specializing_on_Destination = parser.getText();
						} else if (text == 'ASF_Completed_Travel_Courses__c') {
							ASF_Completed_Travel_Courses = parser.getText();
						} else if (text == 'ASF_Last_Completed_Travel_Course__c') {
							ASF_Last_Completed_Travel_Course = parser.getText();
						} else if (text == 'ASF_FAM_Trips__c') {
							ASF_FAM_Trips = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'SpecializationFields consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	
	public static IDCard_RenewalRequest parse(String json) {
		System.JSONParser parser = System.JSON.createParser(json);
		return new IDCard_RenewalRequest(parser);
	}
	
	public static void consumeObject(System.JSONParser parser) {
		Integer depth = 0;
		do {
			System.JSONToken curr = parser.getCurrentToken();
			if (curr == System.JSONToken.START_OBJECT || 
				curr == System.JSONToken.START_ARRAY) {
				depth++;
			} else if (curr == System.JSONToken.END_OBJECT ||
				curr == System.JSONToken.END_ARRAY) {
				depth--;
			}
		} while (depth > 0 && parser.nextToken() != null);
	}
	






    private static List<Items> arrayOfItems(System.JSONParser p) {
        List<Items> res = new List<Items>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Items(p));
        }
        return res;
    }





}