@isTest
private class IEC_CustomerInformationTest
{
	@isTest (SeeAllData=true)
	static void test_onLoadAction()
	{
		Test.setCurrentPage(Page.IEC_CustomerInformation);
		IEC_CustomerInformationController ctrl = new IEC_CustomerInformationController();

		//*** cover case not logged
		System.assert(ctrl.onLoadAction() != null, 'Should return login page');

		//*** create portal user
		User oUser = IECTestUtil.createSampleGuestUserAndLogin(IECConstants.Account_ClientType_MemberAirline);
		Contact oContact = new Contact_Sel().getContactById(oUser.ContactId);

		//*** add sharing to prevent missing access rights
		try {
			insert new AccountShare(AccountId=oContact.AccountId, UserOrGroupId=oUser.Id, RowCause='Manual'
														, AccountAccessLevel='Edit', ContactAccessLevel='Edit', CaseAccessLevel='None', OpportunityAccessLevel='None');
		} catch (Exception e) { /* ignore error */ }

		//*** create address for non-compliant
		List<IECAddress__c> lstAddress = TestDataGenerator.generateAddresses(1, true);

		//*** create products
		delete [select Id from Apex_Setting__c where Name like 'ECommerce Products Filter%'];
		List<Product2> lstProduct = TestDataGenerator.generateProductsWithPrice(2);
		for(Integer x =0; x < lstProduct.size(); x++)
		{
			Product2 p = lstProduct[x];
			p.Post_to_Ecommerce_Date__c = Date.today().addDays(-10);
			p.Sell_through_eCommerce__c = true;
			p.Inventory_Status__c = 'In stock';
			p.SAP_Status_Code__c = 'A';
			p.Line_of_Business__c = 'Publications';
			p.Mega_Menu__c = 'publications';
			p.Refinement_Language__c = 'English';
		}
		update lstProduct;

		//*** create non-compliant products
		Non_Compliant_Country__c oCompliant = new Non_Compliant_Country__c(Product__c = lstProduct[0].Id, IATA_ISO_Country__c = lstAddress[0].ISO_Country__c);
		insert oCompliant;

		//*** create order
		Order oOrder = TestDataGenerator.generateOrder(1, oContact.AccountId, oContact.Id, oContact.Id, false)[0];
		oOrder.OwnerId = oUser.Id;
		oOrder.Type = 'Quote';
		oOrder.Status = 'New';
		insert oOrder;
		oOrder = [select Id, OrderNumber from Order where Id = :oOrder.Id limit 1];

		//*** create order items to cover "validateCountryCompliance"
		List<Id> lstProductId = new List<Id>();
		for (Product2 p : lstProduct)
			lstProductId.add(p.Id);
		List<OrderItem> lstOrderItem = new List<OrderItem>();
		for (PricebookEntry pbe : [select Id from PricebookEntry where Product2Id in :lstProductId])
			lstOrderItem.add(new OrderItem(OrderId=oOrder.Id, PriceBookEntryId=pbe.Id, Quantity=1, UnitPrice=15, Charge_Shipping__c = true, ServiceDate=Date.Today()));
		insert lstOrderItem;

			//*** cover case of invalid sold to partner
			System.runAs(oUser)
			{
				Test.setMock(WebServiceMock.class, new SAP_CustomerMaster_Mock());
				SAP_CustomerMaster_Mock.returnError = 'test';
				SAP_CustomerMaster_Mock.returnOK = null;
				Test.setCurrentPage(Page.IEC_CustomerInformation);
				ctrl = new IEC_CustomerInformationController();
				ctrl.onLoadAction();
				system.assert(ctrl.stopProcess == true, 'Wrong value for invalid partners');
			}

			//*** prepare to cover case of valid sold to partner
			Map<String, Location__c> mapLocation = new Map<String, Location__c>();
			for (Location__c loc : [select Id, Type__c, SAP_Id__c from Location__c where Account__c = :oContact.AccountId])
				mapLocation.put(loc.Type__c.left(4).toLowerCase(), loc);
			mapLocation.get('sold').SAP_Id__c = 'sold';   mapLocation.get('sold').Address__c = lstAddress[0].Id;
			mapLocation.get('bill').SAP_Id__c = 'bill';   mapLocation.get('bill').Address__c = lstAddress[0].Id;
			mapLocation.get('ship').SAP_Id__c = 'ship';   mapLocation.get('ship').Address__c = lstAddress[0].Id;
			update mapLocation.values();

			//*** prepare to cover case of quote
			oOrder.SoldTo_Location__c = mapLocation.get('sold').Id;
			oOrder.BillTo_Location__c = mapLocation.get('bill').Id;
			oOrder.ShipTo_Location__c = mapLocation.get('ship').Id;
			update oOrder;

			Test.startTest();

			//*** cover case of valid sold to partner
			System.runAs(oUser)
			{
				//*** cover case of quote
				Test.setCurrentPageReference(new PageReference('/apex/IEC_CustomerInformation?id=' + oOrder.OrderNumber));
				ctrl = new IEC_CustomerInformationController();
				ctrl.onLoadAction();
				system.assert(ctrl.stopProcess == false, 'Wrong value for valid partners');
			}
		Test.stopTest();
	} //*** end of "test_onLoadAction"

	@isTest (SeeAllData=true)
	static void test_onLoadAction2()
	{
		Test.setCurrentPage(Page.IEC_CustomerInformation);
		IEC_CustomerInformationController ctrl = new IEC_CustomerInformationController();

		//*** cover case not logged
		System.assert(ctrl.onLoadAction() != null, 'Should return login page');

		//*** create portal user
		User oUser = IECTestUtil.createSampleGuestUserAndLogin(IECConstants.Account_ClientType_MemberAirline);
		Contact oContact = new Contact_Sel().getContactById(oUser.ContactId);

		//*** add sharing to prevent missing access rights
		try {
			insert new AccountShare(AccountId=oContact.AccountId, UserOrGroupId=oUser.Id, RowCause='Manual'
														, AccountAccessLevel='Edit', ContactAccessLevel='Edit', CaseAccessLevel='None', OpportunityAccessLevel='None');
		} catch (Exception e) { /* ignore error */ }

		//*** create address for non-compliant
		List<IECAddress__c> lstAddress = TestDataGenerator.generateAddresses(1, true);

		//*** create products
		delete [select Id from Apex_Setting__c where Name like 'ECommerce Products Filter%'];
		List<Product2> lstProduct = TestDataGenerator.generateProductsWithPrice(2);
		for(Integer x =0; x < lstProduct.size(); x++)
		{
			Product2 p = lstProduct[x];
			p.Post_to_Ecommerce_Date__c = Date.today().addDays(-10);
			p.Sell_through_eCommerce__c = true;
			p.Inventory_Status__c = 'In stock';
			p.SAP_Status_Code__c = 'A';
			p.Line_of_Business__c = 'Publications';
			p.Mega_Menu__c = 'publications';
			p.Refinement_Language__c = 'English';
		}
		update lstProduct;

		//*** create non-compliant products
		Non_Compliant_Country__c oCompliant = new Non_Compliant_Country__c(Product__c = lstProduct[0].Id, IATA_ISO_Country__c = lstAddress[0].ISO_Country__c);
		insert oCompliant;

		//*** create order
		Order oOrder = TestDataGenerator.generateOrder(1, oContact.AccountId, oContact.Id, oContact.Id, false)[0];
		oOrder.OwnerId = oUser.Id;
		oOrder.Type = 'Quote';
		oOrder.Status = 'New';
		insert oOrder;
		oOrder = [select Id, OrderNumber from Order where Id = :oOrder.Id limit 1];

		Test.startTest();
			//*** cover case of invalid sold to partner
			System.runAs(oUser)
			{
				Test.setMock(WebServiceMock.class, new SAP_CustomerMaster_Mock());
				SAP_CustomerMaster_Mock.returnError = 'test';
				SAP_CustomerMaster_Mock.returnOK = null;
				Test.setCurrentPage(Page.IEC_CustomerInformation);
				ctrl = new IEC_CustomerInformationController();
				ctrl.onLoadAction();
				system.assert(ctrl.stopProcess == true, 'Wrong value for invalid partners');
			}

			//*** prepare to cover case of valid sold to partner
			Map<String, Location__c> mapLocation = new Map<String, Location__c>();
			for (Location__c loc : [select Id, Type__c, SAP_Id__c from Location__c where Account__c = :oContact.AccountId])
				mapLocation.put(loc.Type__c.left(4).toLowerCase(), loc);
			mapLocation.get('sold').SAP_Id__c = 'sold';   mapLocation.get('sold').Address__c = lstAddress[0].Id;
			mapLocation.get('bill').SAP_Id__c = 'bill';   mapLocation.get('bill').Address__c = lstAddress[0].Id;
			mapLocation.get('ship').SAP_Id__c = 'ship';   mapLocation.get('ship').Address__c = lstAddress[0].Id;
			update mapLocation.values();

			//*** prepare to cover case of quote
			oOrder.SoldTo_Location__c = mapLocation.get('sold').Id;
			oOrder.BillTo_Location__c = mapLocation.get('bill').Id;
			oOrder.ShipTo_Location__c = mapLocation.get('ship').Id;
			update oOrder;

			//*** cover case of valid sold to partner
			System.runAs(oUser)
			{
				// cover case of no order items
				Test.setCurrentPageReference(new PageReference('/apex/IEC_CustomerInformation?id=' + oOrder.OrderNumber));
				ctrl = new IEC_CustomerInformationController();
				ctrl.onLoadAction();

				ctrl.vfOrder.billToAddress.street1 = '12345678901234567890123456789012345678901234567890123456789012345678901234567890';
				ctrl.validateBillingInformation();
			}
		Test.stopTest();
	} //*** end of "test_onLoadAction2"


	@isTest (seeAllData=true)
	static void test_InvalidForm()
	{

		//-- Create an logged-in has portal customer
		User usr = IECTestUtil.createSampleGuestUserAndLogin(IECConstants.Account_ClientType_MemberAirline);

		//-- Create Order
		Account oAccount = TestDataGenerator.generateAccounts(1, true)[0];
		Order ord = TestDataGenerator.generateOrder(1, oAccount.Id, usr.contactId, usr.contactId,false)[0];
		ord.OwnerId = usr.Id;
		insert ord;
		List<OrderItem> orderItems = TestDataGenerator.generateOrderItem(ord.Id, 1, true);

		System.runAs(usr)
		{
			Test.startTest();
				Test.setCurrentPage(Page.IEC_CustomerInformation);
				IEC_CustomerInformationController ctrl = new IEC_CustomerInformationController();
				ctrl.onLoadAction();
				ctrl.sfOrder = IECOrder_Svc.getPenddingOrder(true);
				ctrl.vfOrder = new Order_DTO(ctrl.sfOrder);
				ctrl.initialOrder = new Order_DTO(ctrl.sfOrder);

				String productWrapper = ctrl.productWrapper;

				System.assertNotEquals(0,ctrl.availableSalutations.size());
				System.assertNotEquals(0,ctrl.availableCountries.size());

				//*** cover VAT number part in "saveCustomerInformation" - no assert because call out
				ctrl.loggedCustomer.sfContact.Salutation = 'Mr';
				ctrl.loggedCustomer.sfContact.FirstName = 'Bob';
				ctrl.loggedCustomer.sfContact.LastName = 'Marley';
				ctrl.vfOrder.billToAddress.countryCode = 'CA';
				ctrl.refreshBillToProvinces();
				ctrl.vfOrder.billToAddress.stateCode = 'CA-QC';
				ctrl.vfOrder.billToAddress.vatNumber = '123000555';
				ctrl.saveCustomerInformation();

				//*** cover "validateCustomerInformation" - nothing to assert
				ctrl.loggedCustomer.sfContact.Salutation = '';
				ctrl.loggedCustomer.sfContact.FirstName = '';
				ctrl.loggedCustomer.sfContact.LastName = '';
				ctrl.validateCustomerInformation();

				//*** cover "validateBillingInformation" for state and email parts - nothing to assert
				ctrl.vfOrder.billToAddress.countryCode = 'CA';
				ctrl.refreshBillToProvinces();
				ctrl.vfOrder.billToAddress.stateCode = '';
				ctrl.vfOrder.billToAddress.email = 'dddddddd';
				ctrl.validateBillingInformation();

				//*** cover "validateBillingInformation" for other parts - nothing to assert
				ctrl.loggedCustomer.sfContact.Salutation = 'Mr';
				ctrl.loggedCustomer.sfContact.FirstName = 'Bob';
				ctrl.loggedCustomer.sfContact.LastName = 'Marley';
				ctrl.vfOrder.billToAddress.phone = '';
				ctrl.vfOrder.billToAddress.email = '';
				ctrl.vfOrder.billToAddress.street1 = '';
				ctrl.vfOrder.billToAddress.city = '';
				ctrl.vfOrder.billToAddress.countryCode = '';
				ctrl.vfOrder.billToAddress.isPostalCodeRequired = true;
				ctrl.vfOrder.billToAddress.postalCode = '';
				ctrl.saveCustomerInformation();

				//*** cover "findIECAddresses" - nothing to assert
				List<IECAddress__c> lstAddressAuto = IEC_CustomerInformationController.findIECAddresses('1');
			Test.stopTest();
		}
	} //*** end of "test_InvalidForm"


	@isTest (seeAllData=true)
	static void test_saveCustomerInformation()
	{
		//*** create portal user and test data
		TestDataGenerator.generateApexSetting();
		TestDataGenerator.generateISOCountryState();

		User usrPortal = IECTestUtil.createSampleGuestUserAndLogin(IECConstants.Account_ClientType_MemberAirline);
		Contact conPortal = new Contact_Sel().getContactById(usrPortal.ContactId);
		Account accPortal = new Account(Id=conPortal.AccountId, BillingStreet='~~Billing~~ Street 1', BillingCity='City', BillingPostalCode='H0H0H0'
																	, BillingCountry='Canada', IATA_ISO_Country__r = new IATA_ISO_Country__c(ISO_Code__c = 'CA')
																	, BillingState='Quebec', IATA_ISO_Billing_State__r = new IATA_ISO_State__c(ISO_Code__c = 'CA-QC')
																	, ShippingStreet='~~Shipping~~ Street 1', ShippingCity='City', ShippingPostalCode='H0H0H0'
																	, ShippingCountry='Canada', ShippingState='Quebec', IATA_ISO_Shipping_State__r = new IATA_ISO_State__c(ISO_Code__c = 'CA-QC'));
		List<IECAddress__c> lstAddress = new List<IECAddress__c>();
		lstAddress.add(new IECAddress__c(Street__c = accPortal.BillingStreet, City__c = accPortal.BillingCity, ISO_Country__r = accPortal.IATA_ISO_Country__r, ISO_State__r = accPortal.IATA_ISO_Billing_State__r, ZipCode__c = accPortal.BillingPostalCode));
		lstAddress.add(new IECAddress__c(Street__c = accPortal.ShippingStreet, City__c = accPortal.ShippingCity, ISO_Country__r = accPortal.IATA_ISO_Country__r, ISO_State__r = accPortal.IATA_ISO_Shipping_State__r, ZipCode__c = accPortal.ShippingPostalCode));
		insert lstAddress;
		List<Location__c> lstLocation = new List<Location__c>();
		lstLocation.add(new Location__c(OwnerId=usrPortal.Id, Active__c = true, SAP_Id__c = 'Sold', Type__c = 'Sold To', Address__c = lstAddress[0].Id, Account__c = accPortal.Id));
		lstLocation.add(new Location__c(OwnerId=usrPortal.Id, Active__c = true, SAP_Id__c = 'Bill', Type__c = 'Bill To', Address__c = lstAddress[0].Id, Account__c = accPortal.Id, Contact__c = conPortal.Id, Email__c = conPortal.Email, Phone__c = '123-555-8888'));
		lstLocation.add(new Location__c(OwnerId=usrPortal.Id, Active__c = true, SAP_Id__c = 'Ship', Type__c = 'Ship To', Address__c = lstAddress[1].Id, Account__c = accPortal.Id, Contact__c = conPortal.Id, Email__c = conPortal.Email, Phone__c = '123-555-8888'));
		insert lstLocation;
		accPortal.SoldTo_Location__c = lstLocation[0].Id;
		update accPortal;
		update new Contact(Id = conPortal.Id, BillTo_Location__c = lstLocation[1].Id, ShipTo_Location__c = lstLocation[2].Id);

		//*** add sharing to prevent missing access rights
		try {
			insert new AccountShare(AccountId=accPortal.Id, UserOrGroupId=usrPortal.Id, RowCause='Manual'
														, AccountAccessLevel='Edit', ContactAccessLevel='Edit', CaseAccessLevel='None', OpportunityAccessLevel='None');
		} catch (Exception e) { /* ignore error */ }

		//*** create order
		Order oOrder = TestDataGenerator.generateOrder(1, conPortal.AccountId, conPortal.Id, conPortal.Id, false)[0];
		oOrder.SoldTo_Location__c = lstLocation[0].Id;
		oOrder.BillTo_Location__c = lstLocation[1].Id;
		oOrder.ShipTo_Location__c = lstLocation[2].Id;
		oOrder.OwnerId = usrPortal.Id;
		oOrder.Type = 'Cart';
		oOrder.Status = 'New';
		oOrder.ShipTo_same_BillTo__c = true;
		insert oOrder;
		TestDataGenerator.generateOrderItem(oOrder.Id, 1, true);

		Integer errCount, addressCount, locationCount, runCount;
		System.runAs(usrPortal)
		{
			Test.setCurrentPage(Page.IEC_CustomerInformation);
			IEC_CustomerInformationController ctrl = new IEC_CustomerInformationController();

			Test.startTest();
				ctrl.onLoadAction();

				//*** prepare to update contact information
				ctrl.loggedCustomer.sfContact.Salutation = 'Mr';
				ctrl.loggedCustomer.sfContact.FirstName = 'Bob';
				ctrl.loggedCustomer.sfContact.LastName = 'Marley';

				//*** save Customer Information for case of different address within same country/province - skip assert because error of #records in real environment
				ctrl.vfOrder.billToAddress.street1 = accPortal.ShippingStreet;
				ctrl.vfOrder.billToAddress.city = accPortal.ShippingCity;
				ctrl.refreshBillToProvinces();
				ctrl.vfOrder.billToAddress.stateCode = 'CA-QC';
				ctrl.vfOrder.billToAddress.isPostalCodeRequired = true;
				ctrl.vfOrder.billToAddress.postalCode = accPortal.ShippingPostalCode;
				//addressCount = [select count() from IECAddress__c];
				//locationCount = [select count() from Location__c];
				ctrl.saveCustomerInformation();
				//runCount = [select count() from IECAddress__c];
				//system.assert(runCount == addressCount + 0, 'Should have ' + (addressCount + 0) + ' addresses instead of ' + runCount + ApexPages.getMessages());
				//runCount = [select count() from Location__c];
				//system.assert(runCount == locationCount + 0, 'Should have ' + (locationCount + 0) + ' locations instead of ' + runCount);

				//*** save Customer Information for case of information on location - skip assert because error of #records in real environment
				Test.setCurrentPage(Page.IEC_CustomerInformation);
				ctrl.onLoadAction();
				ctrl.vfOrder.billToAddress.phone = '111-333-5555';
				//addressCount = [select count() from IECAddress__c];
				//locationCount = [select count() from Location__c];
				ctrl.saveCustomerInformation();
				//runCount = [select count() from IECAddress__c];
				//system.assert(runCount == addressCount + 0, 'Should have ' + (addressCount + 0) + ' addresses instead of ' + runCount + ApexPages.getMessages());
				//runCount = [select count() from Location__c];
				//system.assert(runCount == locationCount + 0, 'Should have ' + (locationCount + 0) + ' locations instead of ' + runCount);
			Test.stopTest();
		}
	} //*** end of "test_saveCustomerInformation"


	@isTest (seeAllData=true)
	static void test_saveCustomerInformation2()
	{
		//*** create portal user and test data
		TestDataGenerator.generateApexSetting();
		TestDataGenerator.generateISOCountryState();

		User usrPortal = IECTestUtil.createSampleGuestUserAndLogin(IECConstants.Account_ClientType_MemberAirline);
		Contact conPortal = new Contact_Sel().getContactById(usrPortal.ContactId);
		Account accPortal = new Account(Id=conPortal.AccountId, BillingStreet='~~Billing~~ Street 1', BillingCity='City', BillingPostalCode='H0H0H0'
																	, BillingCountry='Canada', IATA_ISO_Country__r = new IATA_ISO_Country__c(ISO_Code__c = 'CA')
																	, BillingState='Quebec', IATA_ISO_Billing_State__r = new IATA_ISO_State__c(ISO_Code__c = 'CA-QC')
																	, ShippingStreet='~~Shipping~~ Street 1', ShippingCity='City', ShippingPostalCode='H0H0H0'
																	, ShippingCountry='Canada', ShippingState='Quebec', IATA_ISO_Shipping_State__r = new IATA_ISO_State__c(ISO_Code__c = 'CA-QC'));
		List<IECAddress__c> lstAddress = new List<IECAddress__c>();
		lstAddress.add(new IECAddress__c(Street__c = accPortal.BillingStreet, City__c = accPortal.BillingCity, ISO_Country__r = accPortal.IATA_ISO_Country__r, ISO_State__r = accPortal.IATA_ISO_Billing_State__r, ZipCode__c = accPortal.BillingPostalCode));
		lstAddress.add(new IECAddress__c(Street__c = accPortal.ShippingStreet, City__c = accPortal.ShippingCity, ISO_Country__r = accPortal.IATA_ISO_Country__r, ISO_State__r = accPortal.IATA_ISO_Shipping_State__r, ZipCode__c = accPortal.ShippingPostalCode));
		insert lstAddress;
		List<Location__c> lstLocation = new List<Location__c>();
		lstLocation.add(new Location__c(OwnerId=usrPortal.Id, Active__c = true, SAP_Id__c = 'Sold', Type__c = 'Sold To', Address__c = lstAddress[0].Id, Account__c = accPortal.Id));
		lstLocation.add(new Location__c(OwnerId=usrPortal.Id, Active__c = true, SAP_Id__c = 'Bill', Type__c = 'Bill To', Address__c = lstAddress[0].Id, Account__c = accPortal.Id, Contact__c = conPortal.Id, Email__c = conPortal.Email, Phone__c = '123-555-8888'));
		lstLocation.add(new Location__c(OwnerId=usrPortal.Id, Active__c = true, SAP_Id__c = 'Ship', Type__c = 'Ship To', Address__c = lstAddress[1].Id, Account__c = accPortal.Id, Contact__c = conPortal.Id, Email__c = conPortal.Email, Phone__c = '123-555-8888'));
		insert lstLocation;
		accPortal.SoldTo_Location__c = lstLocation[0].Id;
		update accPortal;
		update new Contact(Id = conPortal.Id, BillTo_Location__c = lstLocation[1].Id, ShipTo_Location__c = lstLocation[2].Id);

		//*** add sharing to prevent missing access rights
		try {
			insert new AccountShare(AccountId=accPortal.Id, UserOrGroupId=usrPortal.Id, RowCause='Manual'
														, AccountAccessLevel='Edit', ContactAccessLevel='Edit', CaseAccessLevel='None', OpportunityAccessLevel='None');
		} catch (Exception e) { /* ignore error */ }

		//*** create order
		Order oOrder = TestDataGenerator.generateOrder(1, conPortal.AccountId, conPortal.Id, conPortal.Id, false)[0];
		oOrder.SoldTo_Location__c = lstLocation[0].Id;
		oOrder.BillTo_Location__c = lstLocation[1].Id;
		oOrder.ShipTo_Location__c = lstLocation[2].Id;
		oOrder.OwnerId = usrPortal.Id;
		oOrder.Type = 'Cart';
		oOrder.Status = 'New';
		oOrder.ShipTo_same_BillTo__c = true;
		insert oOrder;
		TestDataGenerator.generateOrderItem(oOrder.Id, 1, true);

		Integer errCount, addressCount, locationCount, runCount;
		System.runAs(usrPortal)
		{
			Test.setCurrentPage(Page.IEC_CustomerInformation);
			IEC_CustomerInformationController ctrl = new IEC_CustomerInformationController();

			Test.startTest();
				ctrl.onLoadAction();

				//*** prepare to update contact information
				ctrl.loggedCustomer.sfContact.Salutation = 'Mr';
				ctrl.loggedCustomer.sfContact.FirstName = 'Bob';
				ctrl.loggedCustomer.sfContact.LastName = 'Marley';

				//*** save Customer Information for case of different country/province - skip some asserts because error of #records in real environment
				ctrl.refreshBillToProvinces();
				ctrl.vfOrder.billToAddress.stateCode = 'CA-ON';
				ctrl.regionChanged();
				Test.setMock(WebServiceMock.class, new SAP_CustomerMaster_Mock());
				SAP_CustomerMaster_Mock.returnError = 'test';
				SAP_CustomerMaster_Mock.returnOK = null;
				errCount = ApexPages.getMessages().size();
				//addressCount = [select count() from IECAddress__c];
				//locationCount = [select count() from Location__c];
				ctrl.saveCustomerInformation();
				system.assert(ApexPages.getMessages().size() == errCount + 1, 'Should have ' + (errCount + 1) + ' messages: ' + '\n' + ctrl.vfOrder.billToAddress + '\n' + ApexPages.getMessages());
				SAP_CustomerMaster_Mock.returnError = null;
				SAP_CustomerMaster_Mock.returnOK = JSON.serialize(new List<String>{'Sold2', 'Bill2', 'Ship2'});
				ctrl.saveCustomerInformation();
				//runCount = [select count() from IECAddress__c];
				//system.assert(runCount == addressCount + 1, 'Should have ' + (addressCount + 1) + ' addresses instead of ' + runCount);
				//runCount = [select count() from Location__c];
				//system.assert(runCount == locationCount + 2, 'Should have ' + (locationCount + 2) + ' locations instead of ' + runCount);
			Test.stopTest();
		}
	} //*** end of "test_saveCustomerInformation2"

	@isTest (seeAllData=true)
	static void test_saveCustomerInformation3()
	{
		//*** create portal user and test data
		TestDataGenerator.generateApexSetting();
		TestDataGenerator.generateISOCountryState();

		User usrPortal = IECTestUtil.createSampleGuestUserAndLogin(IECConstants.Account_ClientType_MemberAirline);
		Contact conPortal = new Contact_Sel().getContactById(usrPortal.ContactId);
		Account accPortal = new Account(Id=conPortal.AccountId, BillingStreet='~~Billing~~ Street 1', BillingCity='City', BillingPostalCode='H0H0H0'
																	, BillingCountry='Canada', IATA_ISO_Country__r = new IATA_ISO_Country__c(ISO_Code__c = 'CA')
																	, BillingState='Quebec', IATA_ISO_Billing_State__r = new IATA_ISO_State__c(ISO_Code__c = 'CA-QC')
																	, ShippingStreet='~~Shipping~~ Street 1', ShippingCity='City', ShippingPostalCode='H0H0H0'
																	, ShippingCountry='Canada', ShippingState='Quebec', IATA_ISO_Shipping_State__r = new IATA_ISO_State__c(ISO_Code__c = 'CA-QC'));
		List<IECAddress__c> lstAddress = new List<IECAddress__c>();
		lstAddress.add(new IECAddress__c(Street__c = accPortal.BillingStreet, City__c = accPortal.BillingCity, ISO_Country__r = accPortal.IATA_ISO_Country__r, ISO_State__r = accPortal.IATA_ISO_Billing_State__r, ZipCode__c = accPortal.BillingPostalCode));
		lstAddress.add(new IECAddress__c(Street__c = accPortal.ShippingStreet, City__c = accPortal.ShippingCity, ISO_Country__r = accPortal.IATA_ISO_Country__r, ISO_State__r = accPortal.IATA_ISO_Shipping_State__r, ZipCode__c = accPortal.ShippingPostalCode));
		insert lstAddress;
		List<Location__c> lstLocation = new List<Location__c>();
		lstLocation.add(new Location__c(OwnerId=usrPortal.Id, Active__c = true, SAP_Id__c = 'Sold', Type__c = 'Sold To', Address__c = lstAddress[0].Id, Account__c = accPortal.Id));
		lstLocation.add(new Location__c(OwnerId=usrPortal.Id, Active__c = true, SAP_Id__c = 'Bill', Type__c = 'Bill To', Address__c = lstAddress[0].Id, Account__c = accPortal.Id, Contact__c = conPortal.Id, Email__c = conPortal.Email, Phone__c = '123-555-8888'));
		lstLocation.add(new Location__c(OwnerId=usrPortal.Id, Active__c = true, SAP_Id__c = 'Ship', Type__c = 'Ship To', Address__c = lstAddress[1].Id, Account__c = accPortal.Id, Contact__c = conPortal.Id, Email__c = conPortal.Email, Phone__c = '123-555-8888'));
		insert lstLocation;
		accPortal.SoldTo_Location__c = lstLocation[0].Id;
		update accPortal;
		update new Contact(Id = conPortal.Id, BillTo_Location__c = lstLocation[1].Id, ShipTo_Location__c = lstLocation[2].Id);

		//*** add sharing to prevent missing access rights
		try {
			insert new AccountShare(AccountId=accPortal.Id, UserOrGroupId=usrPortal.Id, RowCause='Manual'
														, AccountAccessLevel='Edit', ContactAccessLevel='Edit', CaseAccessLevel='None', OpportunityAccessLevel='None');
		} catch (Exception e) { /* ignore error */ }

		//*** create order
		Order oOrder = TestDataGenerator.generateOrder(1, conPortal.AccountId, conPortal.Id, conPortal.Id, false)[0];
		oOrder.SoldTo_Location__c = lstLocation[0].Id;
		oOrder.BillTo_Location__c = lstLocation[1].Id;
		oOrder.ShipTo_Location__c = lstLocation[2].Id;
		oOrder.OwnerId = usrPortal.Id;
		oOrder.Type = 'Cart';
		oOrder.Status = 'New';
		oOrder.ShipTo_same_BillTo__c = true;
		insert oOrder;
		TestDataGenerator.generateOrderItem(oOrder.Id, 1, true);

		Integer errCount, addressCount, locationCount, runCount;
		System.runAs(usrPortal)
		{
			Test.setCurrentPage(Page.IEC_CustomerInformation);
			IEC_CustomerInformationController ctrl = new IEC_CustomerInformationController();

			Test.startTest();
				ctrl.onLoadAction();

				//*** prepare to update contact information
				ctrl.loggedCustomer.sfContact.Salutation = 'Mr';
				ctrl.loggedCustomer.sfContact.FirstName = 'Bob';
				ctrl.loggedCustomer.sfContact.LastName = 'Marley';

				//*** save Customer Information for case of different country/province - skip some asserts because error of #records in real environment
				ctrl.refreshBillToProvinces();
				ctrl.vfOrder.billToAddress.stateCode = 'CA-ON';
				ctrl.regionChanged();
				Test.setMock(WebServiceMock.class, new SAP_CustomerMaster_Mock());
				SAP_CustomerMaster_Mock.returnError = 'test';
				SAP_CustomerMaster_Mock.returnOK = null;
				errCount = ApexPages.getMessages().size();
				//addressCount = [select count() from IECAddress__c];
				//locationCount = [select count() from Location__c];

				ctrl.vfOrder.billToAddress.countryCode = 'ZA';
				ctrl.vfOrder.billToAddress.vatNumber = '123456789';


				ctrl.saveCustomerInformation();
				system.assert(ApexPages.getMessages().size() == errCount + 1, 'Should have ' + (errCount + 1) + ' messages: ' + '\n' + ctrl.vfOrder.billToAddress + '\n' + ApexPages.getMessages());
				SAP_CustomerMaster_Mock.returnError = null;
				SAP_CustomerMaster_Mock.returnOK = JSON.serialize(new List<String>{'Sold2', 'Bill2', 'Ship2'});
				ctrl.saveCustomerInformation();
				//runCount = [select count() from IECAddress__c];
				//system.assert(runCount == addressCount + 1, 'Should have ' + (addressCount + 1) + ' addresses instead of ' + runCount);
				//runCount = [select count() from Location__c];
				//system.assert(runCount == locationCount + 2, 'Should have ' + (locationCount + 2) + ' locations instead of ' + runCount);
			Test.stopTest();
		}
	} //*** end of "test_saveCustomerInformation3"

	@isTest
	static void testGetNewLocation() {
		Test.startTest();

		Location__c loc = IEC_CustomerInformationController.getNewLocation(
			new Location__c (),
			new IECAddress__c(),
			'xpto@xpty.com',
			'+1 123 456 789',
			'123456789'
		);

		Test.stopTest();
	}
}
