public with sharing class AMP_ChatterBroadcastToolController {
	public Integer step {get; set;}

	public String message {get; set;}

	public String accountId {get; set;}

	public String strAcctList {get{
			String tmpStr = '';
			numberOfAccounts = 0;
			for (AccountWrapper aw : lstAccounts) {
				if (aw.isSelected) {
					tmpStr += (tmpStr != '' ? ', ' : '') + aw.acct.Name;
					numberOfAccounts++;
				}
			}

			return tmpStr;
		} set;}

	public list<AccountWrapper> lstAccounts {get; set;}
	public Integer numberOfAccounts {get; set;}

	public String strRegion {get; set;}
	public String membershipStatusSelected {get; set;}

	public Boolean selectWholeRegion {get;set;}

	public List<SelectOption> getlstRegions() {
        List<SelectOption> options = new List<SelectOption>();
        options.add(new SelectOption('','All Regions'));
        options.add(new SelectOption('Africa & Middle East','Africa & Middle East'));
        options.add(new SelectOption('Americas','Americas'));
        options.add(new SelectOption('Asia & Pacific','Asia & Pacific'));
        options.add(new SelectOption('China & North Asia','China & North Asia'));
        options.add(new SelectOption('Europe','Europe'));
        return options;
    }
    
    public List<SelectOption> getMembershipStatuses() {
    	List<SelectOption> options = new List<SelectOption>();
    	options.add(new SelectOption('IATA member', 'IATA Member Airlines'));
    	options.add(new SelectOption('Non-IATA member', 'Non-IATA Active Airlines'));
    	return options;
    }

    public void GoToStep2 () {
    	if (strAcctList == '') {
    		ApexPages.addMessage(new ApexPages.message(ApexPages.severity.ERROR, 'Please select at least 1 Account from the list.'));

		} else {
			step = 2;
		}
    }

    public void GoBackToStep1 () {
    	step = 1;
    }

    public void RestartFromStep1 () {
    	step = 1;
    	message = '';
    	strRegion = '';
    	membershipStatusSelected = 'IATA member';
    	RefreshAccountsList();
    }

    public void BroadcastMessage () {
    	if (message == null || message == '') {
    		ApexPages.addMessage(new ApexPages.message(ApexPages.severity.ERROR, 'Please type in the message to broadcast.'));
		} else {
			list<FeedItem> lstItemsToPost = new list<FeedItem>();

			for (AccountWrapper aw : lstAccounts) {
				if (aw.isSelected) {
					FeedItem newPost = new FeedItem();
					newPost.ParentId = aw.acct.Id;
					newPost.Body = message;
					newPost.Type = 'TextPost';

					lstItemsToPost.add(newPost);
				}
			}

			// make a list of regions, fetch existing and create missing topics
			List<String> lsBroadcastTopicNames =
			new List<String>{'Broadcast All Regions',
			'Broadcast Africa & Middle East',
			'Broadcast Americas',
			'Broadcast Asia & Pacific',
			'Broadcast China & North Asia',
			'Broadcast Europe'};
			List<Topic> lsBroadcastTopics = [SELECT Id,Name FROM Topic WHERE Name IN :lsBroadcastTopicNames];

			SavePoint sp = Database.setSavepoint();
			
			try {

				insert lstItemsToPost;

				// after inserting the actual feeditems create and insert the broadcast topic assignments
				List<TopicAssignment> lsTopicAssignments = new List<TopicAssignment>();
				for(FeedItem fi : lstItemsToPost) {
					if(fi.Id != null && selectWholeRegion) {
						if(strRegion == null || strRegion == '') {
							strRegion = 'All Regions';
						}
						for(Topic t :lsBroadcastTopics) {
							if(t.Name.contains(strRegion)) {
								TopicAssignment ta = new TopicAssignment();
								ta.TopicId = t.Id;
								ta.EntityId = fi.Id;
								lsTopicAssignments.add(ta);
							}
						}
					}
				}

				if(!lsTopicAssignments.isEmpty()) { 
					insert lsTopicAssignments; 
				}

				ApexPages.addMessage(new ApexPages.Message(ApexPages.Severity.INFO, 'The message was successfully broadcasted.'));
					step = 3;

			} catch (Exception e) {
				System.debug(LoggingLevel.FINE, '____ [cls AMP_ChatterBroadcastToolController - broadcastMessage] Exception: ' + e.getMessage());
				
				if(!ApexPages.hasMessages(ApexPages.Severity.ERROR)){
					//Only exhibits the message if it was not thrown an error before (e.g. trigger addError)
					ApexPages.addMessage(new ApexPages.Message(ApexPages.Severity.ERROR, 'The message failed to be broadcasted.'));
				}
				
				Database.rollback(sp);
				
			}
		}
    }

    public void RefreshAccountsList () {

		String baseQuery = '' +
			'SELECT                                        	' +
			'	Id,                                       	' +
			'	Name                                      	' +
			'FROM                                          	' +
			'	Account                                   	' +
			'WHERE                                         	' +
			'	RecordType.DeveloperName = \'IATA_Airline\' ';
	
		if(String.isNotBlank(strRegion)){
			baseQuery += 'AND Region_formula__c = :strRegion ';
		}
		
		// IATA member option selected
		if('IATA member'.equals(membershipStatusSelected)){
			baseQuery += 'AND Membership_status__c = \'IATA member\' ';
		}
		// Non-IATA Member option selected
		else {
			baseQuery += 'AND Membership_status__c <> \'IATA member\' ';
			baseQuery += 'AND Sector__c = \'Airline\' ';
			baseQuery += 'AND ACLI_Status__c = \'Active Company\' ';
		}
		
		baseQuery += 'ORDER BY Name';
		
		List<Account> tmpList = (List<Account>) Database.query(baseQuery);

		list<AccountWrapper> lstFilteredAccounts = new list<AccountWrapper>();
		for (Account acc : tmpList) {
			AccountWrapper aw = new AccountWrapper();
			aw.acct = acc;
			aw.isSelected = false;

			lstFilteredAccounts.add(aw);
		}
		numberOfAccounts = 0;
		lstAccounts = lstFilteredAccounts;
    }

	public AMP_ChatterBroadcastToolController() {
		step = 1;
		numberOfAccounts = 0;
		strRegion = '';
		membershipStatusSelected = 'IATA member';
		RefreshAccountsList();

		accountId =  ApexPages.currentPage().getParameters().get('accountId');
	}

	public class AccountWrapper {
		public Account acct {get; set;}
		public Boolean isSelected {get; set;}
	}
}