@isTest
private class ANG_AccountTriggerHandlerTest {


	@testSetup static void createData() {
		List<ANG_CalloutMapping__c> customsettings = new List<ANG_CalloutMapping__c>();
		customsettings.add(new ANG_CalloutMapping__c(Name = 'BTN_Prov', CalloutClass__c = 'ANG_RME_Alert_Service', Action__c = 'GET', Event_Type__C = 'WebService', Credential__c = '/calculatedrhc/{agencyId}/v1', Named_Credential__c = 'Mulesoft_Credential_Masterdata', Type__c = 'Button'));
		customsettings.add(new ANG_CalloutMapping__c(Name = 'BTN_Bal', CalloutClass__c = 'ANG_RME_Alert_Service', Action__c = 'GET', Event_Type__C = 'WebService', Credential__c = '/consumedrhc/{agencyId}/v1/', Named_Credential__c = 'Mulesoft_Credential_Masterdata', Type__c = 'Button'));
		customsettings.add(new ANG_CalloutMapping__c(Name = 'MAPDF', Change_Code__c = 'MAPDF', CalloutClass__c = 'ANG_CalloutIEPMasterdata', Action__c = 'PUT', Event_Type__C = 'MS_Update', Credential__c = '/agencies/v1/', Named_Credential__c = 'Mulesoft_Credential_Masterdata', Type__c = 'ChangeCode'));
		customsettings.add(new ANG_CalloutMapping__c(Name = 'MBDIL', Change_Code__c = 'MBDIL', CalloutClass__c = 'ANG_CalloutIEPMasterdata', Action__c = 'PUT', Event_Type__C = 'MS_Update', Credential__c = '/agencies/v1/', Named_Credential__c = 'Mulesoft_Credential_Masterdata', Type__c = 'ChangeCode'));
		
		customsettings.add(
			new ANG_CalloutMapping__c(
				Name = 'IEP_PCI_Compliance', 
				Change_Code__c = 'IEPPC', 
				CalloutClass__c = 'ANG_CalloutIEPMasterdata', 
				Action__c = 'PUT',
				Event_Type__C = 'MS_Update', 
				Credential__c = '/agencies/v1/', 
				Named_Credential__c = 'Mulesoft_Credential_Masterdata', 
				Integration_System__c = 'Mulesoft', 
				Type__c = 'Account', 
				Field__c = 'Is_PCI_compliant__c'
			)
		);
		
		insert customsettings;

        Id accRT = AMS_Utils.RECTYPE_IATAAGENCY;
        Id riskStatusAssessmentRT = ANG_Risk_Helper.RECTYPE_RISKSTATUSASSESSMENT;

        List<IATA_ISO_Country__c> countries = new List<IATA_ISO_Country__c>();

        IATA_ISO_Country__c isoTest = new IATA_ISO_Country__c(
        		Name = 'Iso Country Name Test', 
        		CurrencyIsoCode = 'EUR', 
        		ISO_Code_Numeric__c = 620, 
        		ISO_Code__c = 'PT',
        		AIMS_Area_ID__c='1',
        		ANG_Enable_NewGen__c = true,
        		ANG_IEP_Model__c = 'Model A'
        	);
        countries.add(isoTest);

        IATA_ISO_Country__c isoTest2 = new IATA_ISO_Country__c(
        		Name = 'Iso Country Name Test2', 
        		CurrencyIsoCode = 'EUR', 
        		ISO_Code_Numeric__c = 625, 
        		ISO_Code__c = 'ES',
        		AIMS_Area_ID__c='1',
        		ANG_Enable_NewGen__c = true,
        		ANG_IEP_Model__c = 'Model B'
        	);
        countries.add(isoTest2);

        insert countries;

        List<Account> accs = new List<Account>();

        Account a = new Account(
        		Name ='Test', 
        		Type = 'IATA Passenger Sales Agent',
        		Sector__c='Travel Agent', 
        		Location_Type__c = AMS_Utils.HE,
        		Location_Class__c = 'P',
        		ANG_FA_Opt_out__c = false,
        		IATACode__c='12345678',
        		IATA_ISO_Country__c = countries[0].Id,
        		BillingCountry='Iso Country Name Test',
        		ANG_Accreditation_Model__c = AMS_Utils.ACCREDITATIONMODEL_CASH,
        		Status__c = AMS_Utils.ACC_S9_APPROVED,
        		ANG_HE_RiskHistoryAssessment__c = ANG_Risk_Helper.RISK_ASSESSMENT_PASSED,
        		Financial_Review_Result__c = ANG_Risk_Helper.FR_UNSATISFACTORY,
        		RecordTypeId = accRT
        	);
		accs.add(a);

		Account a2 = new Account(
        		Name ='Test2', 
        		Type = 'IATA Passenger Sales Agent',
        		Sector__c='Travel Agent', 
        		Location_Type__c = AMS_Utils.HE,
        		Location_Class__c = 'P',
        		ANG_FA_Opt_out__c = false,
        		IATACode__c='12345677',
        		IATA_ISO_Country__c = countries[1].Id,
        		BillingCountry='Iso Country Name Test2',
        		ANG_Accreditation_Model__c = AMS_Utils.ACCREDITATIONMODEL_CASH,
        		Status__c = AMS_Utils.ACC_S9_APPROVED,
        		ANG_HE_RiskHistoryAssessment__c = ANG_Risk_Helper.RISK_ASSESSMENT_PASSED,
        		Financial_Review_Result__c = ANG_Risk_Helper.FR_UNSATISFACTORY,
        		RecordTypeId = accRT
        	);
		accs.add(a2);

		insert accs;

		insert new ANG_RHC_Information__c (ANG_AccountId__c = a.Id);

		ANG_Agency_Risk_Calculation__c calcA = new ANG_Agency_Risk_Calculation__c(
			RecordTypeId = riskStatusAssessmentRT, 
			ANG_Financial_Review_Result__c = ANG_Risk_Helper.FR_SATISFACTORY, 
			ANG_Risk_History_Assessment__c = ANG_Risk_Helper.RISK_ASSESSMENT_PASSED,
			ANG_Risk_History__c = ANG_Risk_Helper.RISK_STATUS_A, 
			ANG_Limit_Cash_Condition__c = false);

		ANG_Agency_Risk_Calculation__c calcB = new ANG_Agency_Risk_Calculation__c(
			RecordTypeId = riskStatusAssessmentRT, 
			ANG_Financial_Review_Result__c = ANG_Risk_Helper.FR_UNSATISFACTORY, 
			ANG_Risk_History_Assessment__c = ANG_Risk_Helper.RISK_ASSESSMENT_PASSED,
			ANG_Risk_History__c = ANG_Risk_Helper.RISK_STATUS_B,
			ANG_Limit_Cash_Condition__c = false);

		ANG_Agency_Risk_Calculation__c calcB2 = new ANG_Agency_Risk_Calculation__c(
			RecordTypeId = riskStatusAssessmentRT, 
			ANG_Financial_Review_Result__c = ANG_Risk_Helper.FR_SATISFACTORY, 
			ANG_Risk_History_Assessment__c = ANG_Risk_Helper.RISK_ASSESSMENT_FAILED,
			ANG_Risk_History__c = ANG_Risk_Helper.RISK_STATUS_B,
			ANG_Limit_Cash_Condition__c = false);

		ANG_Agency_Risk_Calculation__c calcC = new ANG_Agency_Risk_Calculation__c(
			RecordTypeId = riskStatusAssessmentRT, 
			ANG_Financial_Review_Result__c = ANG_Risk_Helper.FR_UNSATISFACTORY,
			ANG_Risk_History_Assessment__c = ANG_Risk_Helper.RISK_ASSESSMENT_FAILED,
			ANG_Risk_History__c = ANG_Risk_Helper.RISK_STATUS_C,
			ANG_Limit_Cash_Condition__c = true);

		ANG_Agency_Risk_Calculation__c calcC2 = new ANG_Agency_Risk_Calculation__c(
			RecordTypeId = riskStatusAssessmentRT,
		 	ANG_Financial_Review_Result__c = null,
		 	ANG_Risk_History_Assessment__c = ANG_Risk_Helper.RISK_ASSESSMENT_FAILED,
		 	ANG_Risk_History__c = ANG_Risk_Helper.RISK_STATUS_C, 
		 	ANG_Limit_Cash_Condition__c = true);

        ANG_Agency_Risk_Calculation__c rule = new ANG_Agency_Risk_Calculation__c(
        	ANG_Order__c = 1, 
        	ANG_Occurrence_Num__c = 1, 
        	ANG_Adjusted__c = ANG_Risk_Helper.ADJ_NO, 
        	ANG_Accreditation_Model__c = AMS_Utils.ACCREDITATIONMODEL_CASH, 
        	RecordTypeId = ANG_Risk_Helper.RECTYPE_RULES);

		insert new List<ANG_Agency_Risk_Calculation__c>{calcA, calcB, calcB2, calcC, calcC2, rule};

        ANG_Risk_Event_Type__c ret = new ANG_Risk_Event_Type__c(
	            Name = 'Risk Event Test',
	            ANG_Description__c = 'Risk Event Test',
	            ANG_Expiration__c = 24,
	            ANG_Risk_ID__c = 'testRiskId',
	            ANG_Agency_Risk_Calculation__c = rule.Id,
	            Limit_Cash_conditions__c = false
        	);
        insert ret;

	}
	
	static testMethod void test_riskStatus_allcases() {
		Account a = [SELECT Id FROM Account WHERE Name = 'Test'];
		// fill accounts last financial review result and risk history and assert new risk status
		System.debug(loggingLevel.FINE, '____ [cls ANG_AccountTriggerHandlerTest - test_riskStatus_allcases] first update should be A');
		a.Financial_Review_Result__c = ANG_Risk_Helper.FR_SATISFACTORY;
		a.ANG_HE_RiskHistoryAssessment__c = AMS_Utils.PASSED;

		update a;

		a = [SELECT Id, ANG_RiskStatus__c, (SELECT Id, Subject FROM Cases) FROM Account WHERE Name = 'Test'];
		System.assertEquals(ANG_Risk_Helper.RISK_STATUS_A, a.ANG_RiskStatus__c);

		System.debug(loggingLevel.FINE, '____ [cls ANG_AccountTriggerHandlerTest - test_riskStatus_allcases] second update should be B');
		// change values and check downgrade and SAAM case creation
		a.Financial_Review_Result__c = ANG_Risk_Helper.FR_UNSATISFACTORY;
		update a;

		Test.startTest();

		a = [SELECT Id, ANG_RiskStatus__c, (SELECT Id, Subject FROM Cases ORDER BY CreatedDate) FROM Account WHERE Name = 'Test'];
		System.assertEquals(ANG_Risk_Helper.RISK_STATUS_B, a.ANG_RiskStatus__c);
		System.assertEquals(1, a.Cases.size());
		System.assertEquals('Test - 12345678 - Downgrade Risk Status', a.Cases[0].Subject);


		System.debug(loggingLevel.FINE, '____ [cls ANG_AccountTriggerHandlerTest - test_riskStatus_allcases] third update should be C');
		// change values one more time and check downgrade and OSCAR creation
		a.ANG_HE_RiskHistoryAssessment__c =  AMS_Utils.FAILED;
		update a;

		a = [SELECT Id, ANG_RiskStatus__c, (SELECT Id, RecordType.DeveloperName FROM Cases ORDER BY CreatedDate) FROM Account WHERE Name = 'Test'];
		System.assertEquals(ANG_Risk_Helper.RISK_STATUS_C, a.ANG_RiskStatus__c);
		System.assertEquals(2, a.Cases.size());
		System.assertEquals('OSCAR_Communication', a.Cases[1].RecordType.DeveloperName);
		System.assert([SELECT Id, ANG_CashCondition__c FROM ANG_RHC_Information__c WHERE ANG_AccountId__c = :a.Id].ANG_CashCondition__c);

		Test.stopTest();
	}

	static testMethod void test_RHCupdate() {
		
		Account a = [SELECT Id FROM Account WHERE Name = 'Test'];
		a.Status__c = AMS_Utils.ACC_S0_TERMINATED;

		update a;

		Test.startTest();

		a.Status__c = AMS_Utils.ACC_S9_APPROVED;

		update a;

		Test.stopTest();
	}
	
	static testMethod void test_shortNameModification() {
		
		Id accRT = AMS_Utils.RECTYPE_IATAAGENCY;
		ID standardRT = RecordTypeSingleton.getInstance().getRecordTypeId('Account', 'Standard_Account') ;

		Account a1 = new Account(Name = 'NameTest1', IATACode__c = '12344560', TradeName__c = 'tradeName1', RecordTypeId = standardRT,      Short_Name__c = 'ShortNameTest1Example1');	
		Account a2 = new Account(Name = 'NameTest2', IATACode__c = '12344568', TradeName__c = 'tradeName2', RecordTypeId = accRT, Short_Name__c = 'ShortNameTest1Example2');
		Account a3 = new Account(Name = 'NameTest3', IATACode__c = '12344569', TradeName__c = '', RecordTypeId = accRT, Short_Name__c = 'ShortNameTest1Example3');
		
		insert new List<Account>{a1,a2,a3};
		
		Test.startTest();

		List<Account> acctsRetreived = [Select Id, Name, Short_Name__c, TradeName__c from Account where Name in ('NameTest1','NameTest2','NameTest3')];

		Map<String,Account> acctsRetreivedMap = new Map<String,Account>();
		
		for(Account a: acctsRetreived){
			acctsRetreivedMap.put(a.Name,a);
		}

		System.assertEquals('ShortNameTest1Example1',acctsRetreivedMap.get('NameTest1').Short_Name__c);
		System.assertEquals('tradeName2',acctsRetreivedMap.get('NameTest2').Short_Name__c);
		System.assertEquals('NameTest3',acctsRetreivedMap.get('NameTest3').Short_Name__c);

		a1.Name = 'NameTest11';
		a2.IATACode__c = '12344566';
		a2.TradeName__c = 'tradeName22';
		a3.Name = 'NameTest33';
		a3.Short_Name__c = 'ShortNameTest1Example33';
		a3.TradeName__c = 'tradeName3';

		update new List<Account>{a1,a2,a3};

		acctsRetreived = [Select Id, Name, Short_Name__c, TradeName__c from Account where Name in ('NameTest11','NameTest2','NameTest33')];

		acctsRetreivedMap = new Map<String,Account>();
		
		for(Account a: acctsRetreived){
			acctsRetreivedMap.put(a.Name,a);
		}

		System.assertEquals('ShortNameTest1Example1',acctsRetreivedMap.get('NameTest11').Short_Name__c);
		System.assertEquals('tradeName22',acctsRetreivedMap.get('NameTest2').Short_Name__c);
		System.assertEquals('tradeName3',acctsRetreivedMap.get('NameTest33').Short_Name__c);

		Test.stopTest();

	}

	static testMethod void test_updateRHCInformation_OptIN_OptOUT() {

		//
		// Test ANG_FA_Opt_out__c TRUE to FALSE (Oscar)
		//

		Id accRT = AMS_Utils.RECTYPE_IATAAGENCY;
		ID standardRT = RecordTypeSingleton.getInstance().getRecordTypeId('Account', 'Standard_Account');

		Account a = new Account(ANG_FA_Opt_out__c = true, Name = 'NameTest1', IATACode__c = '12344567', TradeName__c = 'tradeName1', RecordTypeId = standardRT,      Short_Name__c = 'ShortNameTest1Example1');

		insert a;

		ANG_RHCHelper.createRHCInfo(new Set<Id>{a.Id}, false);

		List<ANG_RHC_Information__c> rhcList1 = [Select ANG_RHC_Amount_Provisional__c,
													   ANG_Provisional_RHC_Last_Update__c,
													   ANG_RME_Amount__c
												  from ANG_RHC_Information__c 
												 Where ANG_AccountId__c =: a.id];
        
        rhcList1[0].CurrencyIsoCode = 'USD';
        rhcList1[0].ANG_RME_Amount__c = 200;
        upsert rhcList1[0];

		ANG_RME_Alert_Service.RHCMessage message = new ANG_RME_Alert_Service.RHCMessage();

		message.provisionalRHC = 300;
		message.storedBaseCurrency = 'USD';
		message.consumedRHCAmount = 100;
		message.consumedRHCPercentage = 0.1;
		message.iataCode = '12344567';
		message.eventTime = System.now();
		message.storedRHCValue = 200;

		Test.setMock(HttpCalloutMock.class, new HttpResponseGenerator(200, JSON.serialize(message)));		

		a.ANG_FA_Opt_out__c = false;

		Test.startTest();

		update a;

		//forcing call as test will not "chain" processes
		//new ANG_UpdateRHCInformationBatch(new Set<Id>{a.Id}, ANG_UpdateRHCInformationBatch.Process.PROVISIONAL, true, 100).execute(null); 
		new ANG_UpdateRHCInformationQueueable(new Set<Id>{a.Id}, ANG_UpdateRHCInformationBatch.Process.PROVISIONAL, true, 100).execute(null); 
		Test.stopTest();

		List<ANG_RHC_Information__c> rhcList = [Select ANG_RHC_Amount_Provisional__c,
													   ANG_Provisional_RHC_Last_Update__c,
													   ANG_RME_Amount__c
												  from ANG_RHC_Information__c 
												 Where ANG_AccountId__c =: a.id];

		System.assertEquals(message.provisionalRHC, rhcList[0].ANG_RME_Amount__c);

	}

	static testMethod void test_updateRHCInformation_OptIN_OptOUT_ALT() {

		//
		// Test ANG_FA_Opt_out__c TRUE to FALSE (Oscar)
		//

		Id accRT = AMS_Utils.RECTYPE_IATAAGENCY;
		ID standardRT = RecordTypeSingleton.getInstance().getRecordTypeId('Account', 'Standard_Account');

		Account a = new Account(ANG_FA_Opt_out__c = true, Name = 'NameTest1', IATACode__c = '12344567', TradeName__c = 'tradeName1', RecordTypeId = standardRT,      Short_Name__c = 'ShortNameTest1Example1');

		insert a;

		ANG_RHCHelper.createRHCInfo(new Set<Id>{a.Id}, false);

		List<ANG_RHC_Information__c> rhcList1 = [Select ANG_RHC_Amount_Provisional__c,
													   ANG_Provisional_RHC_Last_Update__c,
													   ANG_RME_Amount__c
												  from ANG_RHC_Information__c 
												 Where ANG_AccountId__c =: a.id];
        
        rhcList1[0].CurrencyIsoCode = 'USD';
        rhcList1[0].ANG_RME_Amount__c = 200;
        upsert rhcList1[0];

		ANG_RME_Alert_Service.RHCMessage message = new ANG_RME_Alert_Service.RHCMessage();

		message.provisionalRHC = 300;
		message.storedBaseCurrency = 'USD';
		message.consumedRHCAmount = 100;
		message.consumedRHCPercentage = 0.1;
		message.iataCode = '12344567';
		message.eventTime = System.now();
		message.storedRHCValue = 200;

		Test.setMock(HttpCalloutMock.class, new HttpResponseGenerator(200, JSON.serialize(message)));		

		a.ANG_FA_Opt_out__c = false;

		Test.startTest();

		update a;

		//forcing call as test will not "chain" processes
		//new ANG_UpdateRHCInformationBatch(new Set<Id>{a.Id}, ANG_UpdateRHCInformationBatch.Process.PROVISIONAL, true, 100).execute(null); 
		new ANG_UpdateRHCInformationQueueable(new Set<Id>{a.Id}, ANG_UpdateRHCInformationBatch.Process.PROVISIONAL, true).execute(null); 
		Test.stopTest();

		List<ANG_RHC_Information__c> rhcList = [Select ANG_RHC_Amount_Provisional__c,
													   ANG_Provisional_RHC_Last_Update__c,
													   ANG_RME_Amount__c
												  from ANG_RHC_Information__c 
												 Where ANG_AccountId__c =: a.id];

		System.assertEquals(message.provisionalRHC, rhcList[0].ANG_RME_Amount__c);

	}

	static testMethod void test_updateRHCInformation_OptIN_OptOUT_2() {

		Account a = [SELECT Id FROM Account][0];

  		Contact cont = new Contact(
				lastName ='lastName',
				Financial_Assessment_Contact__c = true,
				AccountId = a.Id, 
				email ='test@test.com'
			);
		insert cont;

        ANG_Risk_Event_Type__c ret = [Select Id from ANG_Risk_Event_Type__c Where Name = 'Risk Event Test'];
	            
        ANG_Agency_Risk_Event__c re1 = new ANG_Agency_Risk_Event__c(
	            ANG_AccountId__c = a.id,
	            ANG_Risk_Type__c = ret.id,
	            ANG_Issued_Date__c = System.today(),
	            ANG_Event_Status__c = ANG_Risk_Helper.STATUS_ACTIVE
        	);

        insert re1;	

        Test.startTest();
		   
		Case cFS = new Case(
				Subject = 'rception case',
				AccountId = a.Id, 
				contactId = cont.Id,
				Status = 'Open', 
				Assessment_Performed_Date__c = system.today(),
				Financial_Review_Result__c = ANG_Risk_Helper.FR_SATISFACTORY,
				RecordTypeId = RecordTypeSingleton.getInstance().getRecordTypeId('Case', 'IATA_Financial_Review'),
				IFAP_Area__c = 'asda44'
			);
		insert cFS;

		cFS.Status = AMS_Utils.CASE_STATUS_FINANCIAL_SECURITY_REQUESTED;

		List<ANG_RHC_Information__c> rhcList1 = [Select ANG_RHC_Amount_Provisional__c,
													   ANG_Provisional_RHC_Last_Update__c,
													   ANG_RME_Amount__c
												  from ANG_RHC_Information__c 
												 Where ANG_AccountId__c =: a.id];
        
        rhcList1[0].CurrencyIsoCode = 'USD';
        rhcList1[0].ANG_RME_Amount__c = 200;
        upsert rhcList1[0];

		ANG_RME_Alert_Service.RHCMessage message = new ANG_RME_Alert_Service.RHCMessage();

		message.provisionalRHC = 300;
		message.storedBaseCurrency = 'USD';
		message.consumedRHCAmount = 100;
		message.consumedRHCPercentage = 0.1;
		message.iataCode = '12345678';
		message.eventTime = System.now();
		message.storedRHCValue = 200;

		Test.setMock(HttpCalloutMock.class, new HttpResponseGenerator(200, JSON.serialize(message)));		

		update cFS;

		//forcing call as test will not "chain" processes
        //new ANG_UpdateRHCInformationBatch(new Set<Id>{a.Id}, ANG_UpdateRHCInformationBatch.Process.PROVISIONAL, true, 100).execute(null);
		new ANG_UpdateRHCInformationQueueable(new Set<Id>{a.Id}, ANG_UpdateRHCInformationBatch.Process.PROVISIONAL, true, 100).execute(null);
		Test.stopTest();

		List<ANG_RHC_Information__c> rhcList = [Select ANG_RHC_Amount_Provisional__c,
													   ANG_Provisional_RHC_Last_Update__c,
													   ANG_RME_Amount__c
												  from ANG_RHC_Information__c 
												 Where ANG_AccountId__c =: a.id];

		System.assertEquals(message.provisionalRHC, rhcList[0].ANG_RME_Amount__c);
	}	

	@isTest static void test_CreateIEPOscars() {

		List<Account> accs = [SELECT Id, ANG_IEP_Status__c FROM Account WHERE Name = 'Test' OR Name = 'Test2' ORDER BY NAME ASC];

		List<Contact> cons = new List<Contact>();
		Contact con1 = new Contact(LastName = 'con1',
				Email = 'test1@istest.newgen', 
				Preferred_Language__c = 'English',
				BSP_CASS_Payment_contact__c = true, 
				Financial_Assessment_Contact__c = true, 
				AccountId = accs[0].Id
		);
		cons.add(con1);

		Contact con2 = new Contact(LastName = 'con2',
				Email = 'test2@istest.newgen', 
				Preferred_Language__c = 'English',
				BSP_CASS_Payment_contact__c = true, 
				Financial_Assessment_Contact__c = true, 
				AccountId = accs[1].Id
		);
		cons.add(con2);

		insert cons;

		List<Portal_Applications__c> pas = new List<Portal_Applications__c>();
		pas.add(new Portal_Applications__c(Name = 'IATA EasyPay (EDENRED)'));
		pas.add(new Portal_Applications__c(Name = 'IATA EasyPay (MSTS)'));
		insert pas;

		List<Portal_Application_Right__c> pars = new List<Portal_Application_Right__c> ();
		pars.add(new Portal_Application_Right__c(Right__c = 'Access Granted', ANG_Portal_Service_Role__c = 'IEP Admin', Portal_Application__c = pas[0].Id, Contact__c = con1.Id ));
		pars.add(new Portal_Application_Right__c(Right__c = 'Access Granted', ANG_Portal_Service_Role__c = 'IEP Admin', Portal_Application__c = pas[1].Id, Contact__c = con2.Id ));
		insert pars;

        Test.startTest();

        Test.setMock(HttpCalloutMock.class, new MockHttpResponseSuccessGenerator());

        
        for (Account a :accs){
        	a.ANG_IEP_Status__c = 'In Progress';
        }

        update accs;

        List<AMS_Oscar__c> oscars = [SELECT Id, STEP17__c FROM AMS_Oscar__c WHERE Process__c = :AMS_Utils.IEPMODELAACCOUNTSETUP OR Process__c = :AMS_Utils.IEPMODELBACCOUNTSETUP];

        System.assertEquals(2,oscars.size());

        for (AMS_Oscar__c oscar : oscars){
        	oscar.STEP17__c = 'Passed';
        }

        update oscars;

        Test.stopTest();

        System.assertEquals(2, [SELECT Id FROM AMS_Agency_Updates__c WHERE Change_Code__c = 'MAPDF' OR Change_Code__c ='MBDIL'].size());
    }

	@isTest static void pciCompliantUpdateTriggerMasterDataTest() {

		List<Account> accs = [SELECT Id, ANG_IEP_Status__c FROM Account WHERE Name = 'Test' OR Name = 'Test2' ORDER BY NAME ASC];

		List<Contact> cons = new List<Contact>();
		Contact con1 = new Contact(LastName = 'con1',
				Email = 'test1@istest.newgen', 
				Preferred_Language__c = 'English',
				BSP_CASS_Payment_contact__c = true, 
				Financial_Assessment_Contact__c = true, 
				AccountId = accs[0].Id
		);
		cons.add(con1);

		Contact con2 = new Contact(LastName = 'con2',
				Email = 'test2@istest.newgen', 
				Preferred_Language__c = 'English',
				BSP_CASS_Payment_contact__c = true, 
				Financial_Assessment_Contact__c = true, 
				AccountId = accs[1].Id
		);
		cons.add(con2);

		insert cons;

		List<Portal_Applications__c> pas = new List<Portal_Applications__c>();
		pas.add(new Portal_Applications__c(Name = 'IATA EasyPay (EDENRED)'));
		pas.add(new Portal_Applications__c(Name = 'IATA EasyPay (MSTS)'));
		insert pas;

		List<Portal_Application_Right__c> pars = new List<Portal_Application_Right__c> ();
		pars.add(new Portal_Application_Right__c(Right__c = 'Access Granted', ANG_Portal_Service_Role__c = 'IEP Admin', Portal_Application__c = pas[0].Id, Contact__c = con1.Id ));
		pars.add(new Portal_Application_Right__c(Right__c = 'Access Granted', ANG_Portal_Service_Role__c = 'IEP Admin', Portal_Application__c = pas[1].Id, Contact__c = con2.Id ));
		insert pars;

        Test.startTest();

        Test.setMock(HttpCalloutMock.class, new MockHttpResponseSuccessGenerator());

        integer i=0;
        for (Account a :accs){
			a.Is_PCI_compliant__c = (Math.mod(i, 2) == 0) ? 'Corporate Card' : 'Nil CC';
        	a.ANG_IEP_Status__c = 'In Progress';
			i++;
        }

        update accs;

		Test.stopTest();

		List<AMS_Agency_Updates__c> agencyUpdLst = new List<AMS_Agency_Updates__c>(
			[SELECT 
				Id, 
				Account__c, 
				Change_Code__c
			 FROM 
			 	AMS_Agency_Updates__c
			]
		);

		system.assert(agencyUpdLst.size() == accs.size(), 'Should have created ' + accs.size() + ' agency updates records');

		for(AMS_Agency_Updates__c upd : agencyUpdLst){
			system.assert(upd.Change_Code__c == 'IEPPC', 'Should have created an update for the IEPPC pci compliant callout entry');
		}

    }

	@isTest static void pciCompliantUpdateDoNotTriggerMasterDataTest() {

		List<Account> accs = [SELECT Id, ANG_IEP_Status__c FROM Account WHERE Name = 'Test' OR Name = 'Test2' ORDER BY NAME ASC];

		List<Contact> cons = new List<Contact>();
		Contact con1 = new Contact(LastName = 'con1',
				Email = 'test1@istest.newgen', 
				Preferred_Language__c = 'English',
				BSP_CASS_Payment_contact__c = true, 
				Financial_Assessment_Contact__c = true, 
				AccountId = accs[0].Id
		);
		cons.add(con1);

		Contact con2 = new Contact(LastName = 'con2',
				Email = 'test2@istest.newgen', 
				Preferred_Language__c = 'English',
				BSP_CASS_Payment_contact__c = true, 
				Financial_Assessment_Contact__c = true, 
				AccountId = accs[1].Id
		);
		cons.add(con2);

		insert cons;

		List<Portal_Applications__c> pas = new List<Portal_Applications__c>();
		pas.add(new Portal_Applications__c(Name = 'IATA EasyPay (EDENRED)'));
		pas.add(new Portal_Applications__c(Name = 'IATA EasyPay (MSTS)'));
		insert pas;

		List<Portal_Application_Right__c> pars = new List<Portal_Application_Right__c> ();
		pars.add(new Portal_Application_Right__c(Right__c = 'Access Granted', ANG_Portal_Service_Role__c = 'IEP Admin', Portal_Application__c = pas[0].Id, Contact__c = con1.Id ));
		pars.add(new Portal_Application_Right__c(Right__c = 'Access Granted', ANG_Portal_Service_Role__c = 'IEP Admin', Portal_Application__c = pas[1].Id, Contact__c = con2.Id ));
		insert pars;

        Test.startTest();

        Test.setMock(HttpCalloutMock.class, new MockHttpResponseSuccessGenerator());

        integer i=0;
        for (Account a :accs){
			a.Is_PCI_compliant__c = (Math.mod(i, 2) == 0) ? 'Corporate Card' : 'Nil CC';
        	a.ANG_IEP_Status__c = 'No IEP Account';
			i++;
        }

        update accs;

		Test.stopTest();

		List<AMS_Agency_Updates__c> agencyUpdLst = new List<AMS_Agency_Updates__c>(
			[SELECT 
				Id
			 FROM 
			 	AMS_Agency_Updates__c
			]
		);

		system.assert(agencyUpdLst.size() == 0, 'Should NOT have created agency updates records');

    }

    public class MockHttpResponseSuccessGenerator implements HttpCalloutMock {
		// Implement this interface method
		public HTTPResponse respond(HTTPRequest req) {
			// Optionally, only send a mock response for a specific endpoint
			// and method.
			System.assertEquals('PUT', req.getMethod());
			
			// Create a fake response
			HttpResponse res = new HttpResponse();
			res.setHeader('Content-Type', 'application/json');
			res.setStatusCode(200);
			return res;
		}
	}
	
}