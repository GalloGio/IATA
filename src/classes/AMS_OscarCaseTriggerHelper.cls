public class AMS_OscarCaseTriggerHelper {
    
    /**
        This is helper class for both OSCAR and OSCAR Case Communication
    **/

    //used to assign new created oscars to one of 5 queues, pending on the region.
    //public static List<Group> queues = [ select Id, DeveloperName from Group where  Type = 'Queue' and DeveloperName in ('Africa_ME_OSCAR','Americas_OSCAR','Asia_Pacific_OSCAR','China_N_Asia_OSCAR','Europe_OSCAR')];
    public static List<Group> queues = [ select Id, DeveloperName from Group where  Type = 'Queue' and DeveloperName in ('AgencyManagementAP','AgencyManagementAfricaME','AgencyManagementAmericas','AgencyManagementChinaNAsia','CasesACCEuropeOffOnshore')];

    private static Id OSCARCaseRecordTypeID = Schema.Case.sObjectType.getDescribe().getRecordTypeInfosByName().get('OSCAR Communication').getRecordTypeId();

	//remove OSCAR from child case, if case is being cloned from OSCAR parent
    public static void removeOscarFromChild(list<Case> triggerNew){

		List<Case> casestoremoveoscar = new List<Case>();
	    List<Id> parentcaseIds = new List<Id>();

		//check parent record type
		for(Case c: triggerNew)
        	if(c.ParentId != null)
            	parentcaseIds.add(c.ParentId);
                
        Map<Id, Case> parentCase = new Map<Id, Case>([SELECT Id, Oscar__c, RecordTypeId FROM Case WHERE Id IN :parentcaseIds AND RecordTypeId = :OSCARCaseRecordTypeID]);
        
        for(Case c: triggerNew){
        	
        	Case parent = parentCase.get(c.parentId);	
        	
        	if(c.ParentId != null && c.Oscar__c != null && parent.Oscar__c != null){
            	if(c.RecordTypeId == OSCARCaseRecordTypeID && parent.RecordTypeId == OSCARCaseRecordTypeID && parent.Oscar__c <> null && c.Oscar__c == parent.Oscar__c)
                	casestoremoveoscar.add(c);
        	}         
        }
        
	    for(Case c: casestoremoveoscar){ 
          
                c.Oscar__c = null;
        }
	}
	
    public static void OSCARCaseCreationRules(list<Case> triggerNew){

        List<Case> oscarCases = new List<Case>();
        Set<Id> oscarIds = new Set<Id>();

        for(Case c: triggerNew){
            if(c.RecordTypeID == OSCARCaseRecordTypeID && c.OSCAR__c != null && c.ParentId == null){
                oscarCases.add(c);
                oscarIds.add(c.OSCAR__c);
            }
        }

        if(oscarCases.isEmpty()) return;

        checkOscarUniqueness(oscarCases, oscarIds);

    }

    public static void OSCARCaseUpdateRules(list<Case> triggerNew, map<Id, Case> triggerOldMap){
        List<Case> oscarCases = new List<Case>();
        Set<Id> oscarIds = new Set<Id>();

        for(Case c: triggerNew){
            if(c.RecordTypeID == OSCARCaseRecordTypeID && triggerOldMap.get(c.id).Oscar__c == null && c.OSCAR__c != null && c.ParentId == null){
                oscarCases.add(c);
                oscarIds.add(c.OSCAR__c);
            }
        }

        if(oscarCases.isEmpty()) return;

        checkOscarUniqueness(oscarCases, oscarIds);
    }

    private static void checkOscarUniqueness(List<Case> oscarCases, Set<Id> oscarIds) {
        Map<Id, Case> caseOSCARMap = new Map<Id, Case>();

        //see if the oscars had a case before the insert/update
        for(Case c :  [SELECT Id, OSCAR__c FROM Case WHERE OSCAR__c IN :oscarIds AND ParentId = null AND Id NOT IN :oscarCases]){
            caseOSCARMap.put(c.OSCAR__c, c);
        }

        for(Case c: oscarCases){
            Case mainOscarCase = caseOSCARMap.get(c.OSCAR__c);
            if(
                mainOscarCase != null
                && mainOscarCase.Id != c.Id
                && mainOscarCase.Id != c.ParentId
            ){
                c.addError('The OSCAR assigned to this Case already has a Case Assigned.');
            }else{
                //prevents error if the oscar had no case and two or more were added
                caseOSCARMap.put(c.OSCAR__c, c);
            }
        }
    }

    public static void blockForbbidenActions(list<Case> triggerNew, map<Id, Case> triggerOldMap){
        for(Case c: triggerNew){
            if(triggerOldMap.get(c.id).RecordTypeId == OSCARCaseRecordTypeID && c.RecordTypeId != OSCARCaseRecordTypeID && triggerOldMap.get(c.id).OSCAR__c != null){
                throw new transformationException('Cannot change the record type of an OSCAR Communication case having an OSCAR assigned.');
            }
            if(triggerOldMap.get(c.id).Oscar__c != null && triggerOldMap.get(c.id).Oscar__c <> c.Oscar__c){
                c.addError('Cannot disattach OSCAR from Case.');
            }
        }
    }

    public static void populateOscarFields(list<Case> triggerNew){

        System.debug('Populating OSCAR fields');

        Set<Id> oscarIds = new Set<Id>();
        List<Case> oscarCases = new List<Case>();

         for(Case c : triggerNew){
            if(c.OSCAR__c != null && c.RecordTypeID == OSCARCaseRecordTypeID &&  c.ParentId == null){
                //need to verify just for the first case on the trigger, since the second one will throw an error
                if(oscarIds.add(c.Oscar__c)) oscarCases.add(c);
            }
        }

        if(oscarCases.isEmpty()) return;

        List<AMS_OSCAR__c> oscarsToUpdate = new List<AMS_OSCAR__c>();
        Map<Id, AMS_OSCAR__c> oscars = new Map<Id, AMS_OSCAR__c> ([SELECT Id,Name FROM AMS_OSCAR__c where Id = :oscarIds]);

        for(Case c : oscarCases){
            if(!oscars.containsKey(c.Oscar__c)) continue;

            Boolean changed = false;
            AMS_OSCAR__c oscar = oscars.get(c.OSCAR__c);
            
            if(oscar.Name != c.CaseNumber){
                System.debug(loggingLevel.FINE, '____ [cls AMS_OscarCaseTriggerHelper - populateOscarFields] Renaming OSCAR - ' + oscar.Id + '('+c.CaseNumber+')');
                
                oscar.Name = c.CaseNumber;
                changed = true;
            }

            if(oscar.BusinessHours__c != c.BusinessHoursId){
                oscar.BusinessHours__c = c.BusinessHoursId;
                changed = true;
            }

            if(changed) oscarsToUpdate.add(oscar);
        }

        if(!oscarsToUpdate.isEmpty()) update oscarsToUpdate;

    }

    public static void assignOscarToRegionQueue(List<AMS_OSCAR__c> triggerNew){

        String americas = null;
        String europe = null;
        String china = null;
        String africa = null;
        String asia = null;

        for(Group q:queues){

            if(q.DeveloperName.equals('AgencyManagementAmericas'))
                americas = q.id;
            else if(q.DeveloperName.equals('CasesACCEuropeOffOnshore'))
                europe = q.id;
            else if(q.DeveloperName.equals('AgencyManagementChinaNAsia'))
                china = q.id;
            else if(q.DeveloperName.equals('AgencyManagementAfricaME'))
                africa = q.id;
            else if(q.DeveloperName.equals('AgencyManagementAP'))
                asia = q.id;
        }

        Set<Id> agencyids = new Set<Id>();
        
            for(AMS_OSCAR__c o:triggerNew){
                if(o.Account__c != null)
                    agencyids.add(o.Account__c);
            }

        Map<Id,Account> mapAgencies = new Map<Id,Account>([select id, IATA_ISO_Country__r.Region__c from Account where id in :agencyids]);  
        
        for(AMS_OSCAR__c oscar: triggerNew){

            Account ag = mapAgencies.get(oscar.Account__c);

            if(ag == null)
                continue;

            String region = fetchRegion(ag);

            if(region == null)
                continue;

            if(region.contains('Americas')){
                oscar.OwnerId = americas;
                System.debug('Oscar assigned to Americas queue.');
            }
            else if(region.contains('Europe')){
                oscar.OwnerId = europe;
                System.debug('Oscar assigned to Europe queue.');
            }
            else if(region.contains('China')){
                oscar.OwnerId = china;
                System.debug('Oscar assigned to China queue.');
            }
            else if(region.contains('Africa')){
                oscar.OwnerId = africa;
                System.debug('Oscar assigned to Africa queue.');
            }
            else if(region.contains('Asia')){
                oscar.OwnerId = asia;
                System.debug('Oscar assigned to Asia queue.');
            }

        }

    }

    public static String fetchRegion(Account agency){

        if(agency.IATA_ISO_Country__r == null || agency.IATA_ISO_Country__r.Region__c == null)
            return null;

        return agency.IATA_ISO_Country__r.Region__c;

    }


    //All cases having a parent which has Record Type OSCAR Communication must have the OSCAR field automaticaly populated
    /*public static void fillOSCARLookup(list<Case> triggerNew){

        List<Id> parentcaseIds = new List<Id>();

        for(Case c: triggerNew)
            if(c.ParentId != null)
                parentcaseIds.add(c.ParentId);

        //check parent record type
        Map<Id, Case> parentCase = new Map<Id, Case>([SELECT Id, Oscar__c, RecordTypeId FROM Case WHERE Id IN :parentcaseIds AND RecordTypeId = :OSCARCaseRecordTypeID]);

        for(Case c: triggerNew){
            Case parent = parentCase.get(c.parentId);
            if(parent!=null && parent.Oscar__c != null && parent.RecordTypeId == OSCARCaseRecordTypeID)
                c.Oscar__c = parent.Oscar__c;
        }

    }*/

    public static Set<Id> caseIrregularityCreated{
        get{
            if(caseIrregularityCreated == null) caseIrregularityCreated = new Set<Id>();
            return caseIrregularityCreated;
        }

        set;
    }

    public static void checkIrregularityThreshold() {
        List<Case> triggerNew = (List<Case>)Trigger.new;

        Id sidraRecTypeId = Schema.Case.sObjectType.getDescribe().getRecordTypeInfosByName().get('SIDRA').getRecordTypeId();

        List<Case> newSidraCases = new List<Case>();
        Map<Id, Account> accounts = new Map<Id, Account>();
        for(Case c : triggerNew){
            if(c.RecordTypeId == sidraRecTypeId){
                newSidraCases.add(c);
                accounts.put(c.AccountId, null);
            }
        }

        if(newSidraCases.isEmpty()) return;

        Set<Id> isoCountries = new Set<Id>();
        for(Account a : [SELECT Id, IATA_ISO_Country__c, Location_Class__c FROM Account WHERE IATA_ISO_Country__c != null AND Location_Class__c != null AND Id IN :accounts.keySet()]){
            accounts.put(a.Id, a);
            isoCountries.add(a.IATA_ISO_Country__c);
        }

        Map<String, Decimal> thresholds = new Map<String, Decimal>();
        for(IATA_ISO_Country__c country : [SELECT
                                                        Id
                                                        , (SELECT
                                                                Id
                                                                , Threshold__c
                                                                , Location_Class__c
                                                            FROM AMS_Country_Specific_Attributes__r
                                                            WHERE RecordType.Name = 'Irregularity Threshold'
                                                            AND Threshold__c != null
                                                            AND Location_Class__c != null)
                                                    FROM IATA_ISO_Country__c
                                                    WHERE Id IN :isoCountries])
        {
            for(AMS_Country_Specific_Attribute__c att : country.AMS_Country_Specific_Attributes__r){
                thresholds.put(''+country.Id+att.Location_Class__c, att.Threshold__c);
            }
        }
        System.debug(loggingLevel.Debug, '____ [trg AMS_OscarCaseTriggerHelper - checkIrregularityThresold] thresholds - ' + thresholds);

        for(Case c : newSidraCases){
            Account a = accounts.get(c.AccountId);
            if(a != null) c.Acc_IRR_leading_to_DEF__c = thresholds.get(''+a.IATA_ISO_Country__c+a.Location_Class__c);
        }
    }
    

    //creates new change codes when a sidra case is closed
    public static void createSidraIrregularities() {
        List<Case> IRRCases = new List<Case>();
        List<Case> IRRWDCases = new List<Case>();

        Id sidraRecTypeId = Schema.Case.sObjectType.getDescribe().getRecordTypeInfosByName().get('SIDRA').getRecordTypeId();
        for(Case c : (List<Case>)Trigger.new){
            Case cOld = (Trigger.isInsert ? null : (Case)Trigger.oldMap.get(c.Id));
            if(c.RecordTypeId == sidraRecTypeId){
                if(c.IRR_Withdrawal_Approval_Rejection__c == 'Approved' && (Trigger.isInsert || cOld.IRR_Withdrawal_Approval_Rejection__c != 'Approved') && caseIrregularityCreated.add(c.Id)) IRRWDCases.add(c);
                if(c.IRR_Approval_Rejection__c == 'Approved' && (Trigger.isInsert || cOld.IRR_Approval_Rejection__c != 'Approved') && caseIrregularityCreated.add(c.Id)) IRRCases.add(c);
            }
        }

        if(IRRCases.isEmpty() && IRRWDCases.isEmpty()) return;

        List<Agency_Applied_Change_code__c> irregularities = new List<Agency_Applied_Change_code__c>();

        for(Case c : IRRCases) irregularities.add(createChangeCodeFromCase(c, 'A'));
        for(Case c : IRRWDCases) irregularities.add(createChangeCodeFromCase(c, 'W'));

        insert irregularities;
    }

    private static Agency_Applied_Change_code__c createChangeCodeFromCase(Case c, String operation) {
        Agency_Applied_Change_code__c irr = new Agency_Applied_Change_code__c();
        irr.Account__c = c.AccountId;
        irr.Change_Code__c = 'IRR';
        irr.SIDRA_Case__c = c.Id;
        irr.Operation__c = operation;

        irr.Irregularities_Points__c = 0;
        if(c.IRR_Type__c == 'Single Irregularity') irr.Irregularities_Points__c = 1;
        if(c.IRR_Type__c == 'Double Irregularity') irr.Irregularities_Points__c = 2;

        return irr;
    }

	
	private static id RTSidra = RecordTypeSingleton.getInstance().RtIDsPerDeveloperNamePerObj.get('Case').get('SIDRA');
	private static id RTSidraLite = RecordTypeSingleton.getInstance().RtIDsPerDeveloperNamePerObj.get('Case').get('SIDRA_Lite');
	
	public static void CreateRiskChangeCode(){
		if(AMS_OscarCase_RiskMgmt.runOnce()){
			map<id, case> mapNewCase = new map<id, case>();
			map<id, case> mapOldCase = new map<id, case>();
			
			for(Case c : (List<Case>)Trigger.new){
	            Case cOld = (Trigger.isInsert ? null : (Case)Trigger.oldMap.get(c.Id));
	            if(c.RecordTypeId == RTSidra || c.RecordTypeId == RTSidraLite){
	            	mapNewCase.put(c.Id, c);
	            	if(cOld!=null)
	            		mapOldCase.put(cOld.id, cOld);
	            }
	        }
	        system.debug('DTULLO Helper 334 --> ' + mapNewCase.size());
	        if(!mapNewCase.isEmpty())
	        	AMS_OscarCase_RiskMgmt.CreateRiskChangeCode(mapOldCase, mapNewCase);
		}
		
	}

    /*AMS-1580 and AMS-1585*/
    public static void copyDataFromOscar() {


        Map<Id, Case> oldMap = (Map<Id, Case>)Trigger.oldMap;

        List<Case> oscarCases = new List<Case>();
        Map<Id, AMS_OSCAR__c> oscars = new Map<Id, AMS_OSCAR__c>();

        for(Case c : (List<Case>) Trigger.New){
            if(
                c.RecordTypeID == OSCARCaseRecordTypeID
                && c.OSCAR__c != null
                && (Trigger.isInsert || (Trigger.isUpdate && oldMap.get(c.Id).Oscar__c != c.Oscar__c))
            ){
            
                oscarCases.add(c);
                oscars.put(c.Oscar__c, null);
            }
            else{ // this is only for update  AMS-1667

            if(
                c.RecordTypeID == OSCARCaseRecordTypeID
                && c.OSCAR__c != null
                && Trigger.isUpdate 
            ){

                oscarCases.add(c);
                oscars.put(c.Oscar__c, null);

            }
            

            }
        }

        if(oscarCases.isEmpty()) return;

        oscars = new Map<Id, AMS_OSCAR__c>([SELECT Id, OwnerId, Status__c, Account__r.Name, Account__r.Location_Type__c , Account__r.Category__c FROM AMS_OSCAR__c WHERE Id IN :oscars.keySet()]);

        for(Case c : oscarCases){
            
            if(c.OwnerId != oscars.get(c.Oscar__c).OwnerId)
                c.OwnerId = oscars.get(c.Oscar__c).OwnerId;
            
            if(c.Status != oscars.get(c.Oscar__c).Status__c)
                c.Status = oscars.get(c.Oscar__c).Status__c;

            String typeOfCustomer = AMS_Utils.fetchTypeOfCustomer(oscars.get(c.Oscar__c).Account__r.Location_Type__c,oscars.get(c.Oscar__c).Account__r.Category__c);

            if(typeOfCustomer != null && typeOfCustomer != c.Type_of_customer__c)
                c.Type_of_customer__c = typeOfCustomer;

            String newCaseSubject = null;
			
			if(c.reason1__c != null)
				newCaseSubject = c.reason1__c + ' - ' + oscars.get(c.Oscar__c).Account__r.Name;

            if(newCaseSubject != null && c.Subject != newCaseSubject && AMS_OscarMigrationFromCase.changeSubject)
                c.Subject = newCaseSubject;
        }
    }
}