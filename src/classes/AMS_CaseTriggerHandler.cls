public class AMS_CaseTriggerHandler {
    private static id SIDRALiteRTId = RecordTypeSingleton.getInstance().RtIDsPerDeveloperNamePerObj.get('Case').get('SIDRA_Lite');
	private static id SIDRARTId = RecordTypeSingleton.getInstance().RtIDsPerDeveloperNamePerObj.get('Case').get('SIDRA');
    
    public static void handleAfterInsert(List<Case> Cases){
        list<case> lsSidraLiteCases = new list<case>();
        
        for(case c:cases){
        	if(c.recordtypeid == SIDRALiteRTId || c.recordtypeid==SIDRARTId)
        		lsSidraLiteCases.add(c);
        }
        
        if(!lsSidraLiteCases.isEmpty())
        	SelectAgencyOnSidraCase(lsSidraLiteCases);
    }
    
    public static void SelectAgencyOnSidraCase(list<case> Cases){
    	map<id, id> AccntFromCases = new map<id, id>();
    	
    	for(case c:cases)
    		AccntFromCases.put(c.AccountId, c.id);
		
		//get all HOId, up to 3 levels of hierarchy
    	map<id, id> mapAccntHO = new map<id, id>();
    	for(Account a:[select id, ParentId, Parent.ParentId, parent.parent.parentId from Account where id in:AccntFromCases.Keyset() order by ParentId, Parent.ParentId, parent.parent.parentId NULLS LAST]){
    		if(a.Parent.Parent.ParentId==null && AccntFromCases.containsKey(a.Id)){
    			mapAccntHO.put(a.Parent.ParentId, AccntFromCases.get(a.Id));
    			continue;
    		}
    		
    		if(a.Parent.ParentId==null && AccntFromCases.containsKey(a.Id)){
    			mapAccntHO.put(a.ParentId, AccntFromCases.get(a.Id));
    			continue;
    		}
    		
    		if(a.ParentId==null && AccntFromCases.containsKey(a.Id)){
    			mapAccntHO.put(a.Id, AccntFromCases.get(a.Id));
    			continue;
    		}
    	}
    	
    	set<string> setStatusToInclude = new set<string>{'Approved','Cash basis/no commission','Cash basis/with commission','Changes processed','Listed','Under review'};
    	
    	if(!mapAccntHO.isEmpty()){
    		ID RTId = TransformationHelper.RtIDsPerDeveloperNamePerObj(new list<string>{'AMS_Process_Detail__c'}).get('AMS_Process_Detail__c').get('CaseRelatedAgencies');
    		list<AMS_Process_Detail__c> lsToInsert = new list<AMS_Process_Detail__c>();
    		for(Account a:[select id, status__c
    						, ParentId, Parent.Status__c
    						, Parent.ParentId, Parent.Parent.Status__c 
    					   from Account 
    					   where (id in:mapAccntHO.keyset()
    					   or parentid in :mapAccntHO.keyset()
    					   or parent.parentId in:mapAccntHO.keyset())
    					   and status__c in:setStatusToInclude]){
    			if(a.Parent.ParentId != null && mapAccntHO.containsKey(a.Parent.ParentId)){
    				lsToInsert.add(new AMS_Process_Detail__c(Case__c = mapAccntHO.get(a.Parent.ParentId), Account__c = a.id, RecordTypeId = RTId));
    				continue;
    			}
    			
    			if(a.ParentId != null && mapAccntHO.containsKey(a.ParentId)){
    				lsToInsert.add(new AMS_Process_Detail__c(Case__c = mapAccntHO.get(a.ParentId), Account__c = a.id, RecordTypeId = RTId));
    				continue;
    			}
    			
    			if(mapAccntHO.containsKey(a.Id)){
    				lsToInsert.add(new AMS_Process_Detail__c(Case__c = mapAccntHO.get(a.Id), Account__c = a.Id, RecordTypeId = RTId));
    				continue;
    			}
	    	}
	    	
	    	if(!lsToInsert.isEmpty())
	    		insert lsToInsert;
    	}
    }
}