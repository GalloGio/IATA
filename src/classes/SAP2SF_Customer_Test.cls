/****************************************************************************************************
    Created by Thai 2016-02-04
        Cover code in class "SAP2SF_Customer"
****************************************************************************************************/
@isTest
private class SAP2SF_Customer_Test {


/****************************************************************************************************
    Created by Thai 2016-02-04
        Cover code all methods in class
****************************************************************************************************/
@isTest static void test_AllMethod() {
    TestDataGenerator.generateApexSetting();

    //*** generate accounts, contacts, users
    List<Account> lstAccount = TestDataGenerator.generateAccounts(2, true);
    List<Contact> lstContact = TestDataGenerator.generateContacts(lstAccount[0].Id, 3, true);
    TestDataGenerator.generatePortalUser('ISS Portal', lstContact[0].Id, true);

    //*** generate addresses and relationships with SAP
    List<IECAddress__c> lstAddress = new List<IECAddress__c>();
    for (IATA_ISO_Country__c country : TestDataGenerator.generateISOCountryState())
        for (IATA_ISO_State__c state : country.IATA_ISO_States__r)
        {
            lstAddress.add(new IECAddress__c(Street__c='street', City__c='city', ISO_State__c=state.Id, State__c=state.ISO_Code__c
                                           , ISO_Country__c=country.Id, Country__c=country.ISO_Code__c, ZipCode__c='ZZ'));
            break;
        }
    insert lstAddress;
    List<Location__c> lstLocation = new List<Location__c> {
        new Location__c(Type__c='Sold To', Active__c=true, Account__c=lstAccount[0].Id, Address__c=lstAddress[0].Id)
      , new Location__c(Type__c='Bill To', Active__c=true, Account__c=lstAccount[0].Id, Contact__c=lstContact[0].Id, Address__c=lstAddress[0].Id)
      , new Location__c(Type__c='Ship To', Active__c=true, Account__c=lstAccount[0].Id, Contact__c=lstContact[1].Id, Address__c=lstAddress[0].Id, SAP_Id__c='ShipTo')
    };
    insert lstLocation;

    //*** ensure SAP Id to cover scenarios
    lstLocation = [select Id, Type__c from Location__c where Account__c = :lstAccount[0].Id];
    for (Location__c location : lstLocation)
        location.SAP_Id__c = ((location.Type__c == 'Ship To') ? 'ShipTo' : null);
    update lstLocation;

    SAP2SF_Customer.SoldToDetail SoldTo = new SAP2SF_Customer.SoldToDetail();
    SAP2SF_Customer.BillToDetail BillTo = new SAP2SF_Customer.BillToDetail();
    SAP2SF_Customer.ShipToDetail ShipTo = new SAP2SF_Customer.ShipToDetail();

    //*** cover invalid request
    SAP2SF_Customer.updateCustomer('zzz', SoldTo, BillTo, ShipTo);
    SAP2SF_Customer.updateCustomer('dsp', null, null, null);
    SAP2SF_Customer.updateCustomer('usp', null, null, null);
    SAP2SF_Customer.updateCustomer('ubp', SoldTo, null, null);
    SAP2SF_Customer.updateCustomer('ubp', null, BillTo, null);
    SAP2SF_Customer.updateCustomer('ush', SoldTo, null, null);
    SAP2SF_Customer.updateCustomer('ush', null, null, ShipTo);
    system.assert(7 == [select count() from IEC_Error_Log__c], 'Wrong error logged');

    //*** cover Sold To location not found
    SoldTo.SAP_SoldToID = 'SoldTo???';
    SoldTo.SFDC_AccountID = lstAccount[1].Id;
    SAP2SF_Customer.updateCustomer('usp', SoldTo, null, null);
    system.assert(8 == [select count() from IEC_Error_Log__c], 'Wrong error logged');

    //*** cover method "updateSoldTo" and update part of "getSoldToLocation"
    SoldTo.SAP_SoldToID = 'SoldTo';
    SoldTo.SFDC_AccountID = lstAccount[0].Id;
    SoldTo.PaymentTerm = '1111';
    SoldTo.PriceGroup = '11';
    SoldTo.SalesOffice = '2222';
    SAP2SF_Customer.updateCustomer('usp', SoldTo, null, null);
    system.assert(1 == [select count()
                        from Location__c
                        where Type__c = 'Sold To'
                          and Account__c = :SoldTo.SFDC_AccountID
                          and SAP_Id__c = :SoldTo.SAP_SoldToID], 'Sold To SAP Id not set');
    system.assert(1 == [select count()
                        from Account
                        where Id = :SoldTo.SFDC_AccountID
                          and Payment_Term__c = :SoldTo.PaymentTerm
                          and Price_Group__c = :SoldTo.PriceGroup
                          and Sales_Office__c = :SoldTo.SalesOffice], 'Account not updated');

    //*** cover Bill To location not found
    BillTo.SAP_BillToID = 'BillTo???';
    BillTo.SFDC_ContactID = lstContact[2].Id;
    SAP2SF_Customer.updateCustomer('ubp', SoldTo, BillTo, null);
    system.assert(9 == [select count() from IEC_Error_Log__c], 'Wrong error logged');

    //*** cover method "updateBillTo", update part of "getBillToOrShipToLocation", perfect match part of "getSoldToLocation"
    BillTo.SAP_BillToID = 'BillTo';
    BillTo.SFDC_ContactID = lstContact[0].Id;
    BillTo.ShippingCondition = 'bt';
    SAP2SF_Customer.updateCustomer('ubp', SoldTo, BillTo, null);
    system.assert(1 == [select count()
                        from Location__c
                        where Type__c = 'Bill To'
                          and Account__c = :SoldTo.SFDC_AccountID and Contact__c = :BillTo.SFDC_ContactID
                          and SAP_Id__c = :BillTo.SAP_BillToID
                          and Shipping_Condition__c = :BillTo.ShippingCondition], 'Bill To not updated');

    //*** cover Ship To location not found
    ShipTo.SAP_ShipToID = 'ShipTo???';
    ShipTo.SFDC_ContactID = lstContact[2].Id;
    SAP2SF_Customer.updateCustomer('ush', SoldTo, null, ShipTo);
    system.assert(10 == [select count() from IEC_Error_Log__c], 'Wrong error logged');

    //*** cover method "updateShipTo", perfect match part of "getBillToOrShipToLocation"
    ShipTo.SAP_ShipToID = 'ShipTo';
    ShipTo.SFDC_ContactID = lstContact[1].Id;
    ShipTo.ShippingCondition = 'st';
    SAP2SF_Customer.updateCustomer('ush', SoldTo, null, ShipTo);
    system.assert(1 == [select count()
                        from Location__c
                        where Type__c = 'Ship To'
                          and Account__c = :SoldTo.SFDC_AccountID and Contact__c = :ShipTo.SFDC_ContactID
                          and SAP_Id__c = :ShipTo.SAP_ShipToID
                          and Shipping_Condition__c = :ShipTo.ShippingCondition], 'Ship To not updated');

    //*** cover method "deactivateSoldTo"
    system.assert(3 == [select count()
                        from Location__c
                        where Type__c in ('Sold To', 'Bill To', 'Ship To')
                          and Account__c = :SoldTo.SFDC_AccountID
                          and Active__c = true], 'Wrong location data before deactivation');
    system.assert(1 == [select count()
                        from User
                        where Contact.AccountId = :SoldTo.SFDC_AccountID
                          and IsActive = true], 'Wrong user data before deactivation');
    system.runAs([select Id from User where Id = :UserInfo.getUserId() limit 1][0])
    {
        Test.startTest();
            SAP2SF_Customer.updateCustomer('dsp', SoldTo, null, null);
        Test.stopTest();
    }
    system.assert(0 == [select count()
                        from Location__c
                        where Type__c in ('Sold To', 'Bill To', 'Ship To')
                          and Account__c = :SoldTo.SFDC_AccountID
                          and Active__c = true], 'Wrong location data after deactivation');
    system.assert(0 == [select count()
                        from User
                        where Contact.AccountId = :SoldTo.SFDC_AccountID
                          and IsActive = true], 'Wrong user data after deactivation');

    //*** cover case of error
    delete [select Id from IEC_Error_Log__c];
    SoldTo.SFDC_AccountID = 'wrong id format';
    SAP2SF_Customer.updateCustomer('dsp', SoldTo, null, null);
    system.assert(1 == [select count() from IEC_Error_Log__c], 'Wrong error logged');
} //*** end of "test_AllMethod"

	
} //*** end of class