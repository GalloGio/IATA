@isTest
private class AMS_ChangeCodes_Utils_Test {
	
	@testSetup 
	static void setup(){

		String SECTORPAX = 'Travel Agent';
        String CATEGORYPAX = 'IATA Passenger Sales Agent';
        String LOCCLASSPAX = 'P';

        String SECTORCASS = 'Cargo Agent';
        String CATEGORYCASS = 'IATA Cargo Sales Agent';
        String LOCCLASSCASS = 'C';

        String CHANGELOCATIONTYPE = 'Location type';
        String CHANGEOWNERSHIPIATA= 'Ownership to IATA Agent';
        String CHANGEOWNERSHIPNONIATA= 'Ownership to non-IATA Agent';

        Boolean isPax = true;

        ID rtAgency = Schema.SObjectType.Account.getRecordTypeInfosByName().get('Agency').getRecordTypeId();
        IATA_ISO_Country__c italy = new IATA_ISO_Country__c(Name='Italy', ISO_Code__c='IT', Region__c='Europe', ISS_Office_Location__c='Italy');
        insert italy;
        

      
        Account HO1 = new Account(RecordTypeId = rtAgency, Name = 'My Travels', IATAcode__c = '1111110', IATA_ISO_Country__c = italy.id, 
                         Sector__c = (isPax ? SECTORPAX : SECTORCASS), Category__c = (isPax ? CATEGORYPAX : CATEGORYCASS), 
                         Location_Class__c = (isPax ? LOCCLASSPAX : LOCCLASSCASS), Location_Type__c = 'HO', Status__c = 'Approved',
                         Short_Name__c = 'Short name', BillingCity = 'Lisbon', Email__c = 'testeteste@fefe3.com'
                         );
      
        insert HO1;

        Account HO2 = new Account(RecordTypeId = rtAgency, Name = 'My Travels 2', IATAcode__c = '1111112', IATA_ISO_Country__c = italy.id, 
                         Sector__c = (isPax ? SECTORPAX : SECTORCASS), Category__c = (isPax ? CATEGORYPAX : CATEGORYCASS), 
                         Location_Class__c = (isPax ? LOCCLASSPAX : LOCCLASSCASS), Location_Type__c = 'HO', Status__c = 'Approved',
                         Short_Name__c = 'Short name 2 ', BillingCity = 'Lisbon', Email__c = 'testeteste@fefe4.com'
                         );
      
        insert HO2;
        


    }
	
    static testMethod void TestChangesCodesCreation() {

 
        List<Account> accountLst = [SELECT ID, Status__c from Account ];
		
        if(accountLst.isEmpty())
            System.assert(true,false);

		Test.startTest();

        if(accountLst.isEmpty())
            System.assert(true,false);
        
        Account acc1 = accountLst.get(0);
        Account acc2 = accountLst.get(0);

		AMS_OSCAR_JSON.ChangeCode changeCode1 = new AMS_OSCAR_JSON.ChangeCode();
		AMS_OSCAR_JSON.ChangeCode changeCode2 = new AMS_OSCAR_JSON.ChangeCode();

		changeCode1.name = 'CTA';
		changeCode1.reasonCode = 'Change data';
		changeCode1.memoText = 'Minor Changes';//createMemoText(accountChanges);
		changeCode1.reasonDesc  = 'Accredited-Meets Criteria.';
		changeCode1.status  = null;

		changeCode2.name = 'CAD';
		changeCode2.reasonCode = 'Change data';
		changeCode2.memoText = 'Minor Changes';//createMemoText(accountChanges);
		changeCode2.reasonDesc  = 'Accredited-Meets Criteria.';
		changeCode2.status  = null;

		AMS_ChangeCodes_Utils.ObjectChange objChange1 = new AMS_ChangeCodes_Utils.ObjectChange('Account','Name','new Value Name' ,'old Value Name' );
		AMS_ChangeCodes_Utils.ObjectChange objChange2 = new AMS_ChangeCodes_Utils.ObjectChange('Case','Name','new Value Name Case','old Value Name Case' );

		AMS_ChangeCodes_Utils.ObjectChange objChange3 = new AMS_ChangeCodes_Utils.ObjectChange('Account','Name2','new Value Name 2' ,'old Value Name 2' );
		AMS_ChangeCodes_Utils.ObjectChange objChange4 = new AMS_ChangeCodes_Utils.ObjectChange('Case','Name2','new Value Name Case 2','old Value Name Case 2' );

		List <AMS_ChangeCodes_Utils.ObjectChange> objChangeList = new List <AMS_ChangeCodes_Utils.ObjectChange>{objChange1,objChange2};

		AMS_ChangeCodes_Utils.ObjectChangesStruct objChangeListStruct1 = new AMS_ChangeCodes_Utils.ObjectChangesStruct(new List <AMS_ChangeCodes_Utils.ObjectChange>{objChange1,objChange2});
		AMS_ChangeCodes_Utils.ObjectChangesStruct objChangeListStruct2 = new AMS_ChangeCodes_Utils.ObjectChangesStruct(new List <AMS_ChangeCodes_Utils.ObjectChange>{objChange3,objChange4});


		AMS_ChangeCodes_Utils.createAAChangeCodes(new List<AMS_ChangeCodes_Utils.ObjectChangesStruct> {objChangeListStruct1,objChangeListStruct2},
		                                          new List <AMS_OSCAR_JSON.ChangeCode> {changeCode1,changeCode2},new List<AMS_OSCAR__c>{null,null}, 
		                                          new List<Account> {acc1,acc2}, 
		                                          false);

   
        Test.stopTest();

        /*****************************/
        /******** Assert Equals ******/
        /*****************************/
        
        //System.assertEquals();
    

	}
}