public class IECEBC_Utility {
    public static String generateRandomString(Integer len) {
        final String chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789abcdefghijklmnopqrstuvwxyz';
        String randStr = '';
        while (randStr.length() < len) {
            Integer idx = Math.mod(Math.abs(Crypto.getRandomInteger()), chars.length());
            randStr += chars.substring(idx, idx+1);
        }
        return randStr; 
    }
    
    public static void creditCampaign(Id campaignId) {
        EBC_Campaign__c c = [Select Id, Number_of_Recipients__c, Billing_Account__c, Billing_Account__r.eBroadcast_Email_Balance__c From EBC_Campaign__c Where Id = :campaignId AND Status__c in ('APPROVED', 'PENDING_APPROVAL') LIMIT 1];
        
        EBC_Activity__c a = new EBC_Activity__c();
        a.EBC_Campaign__c = c.Id;
        a.Related_Billing_Account__c = c.Billing_Account__c;
        a.Total_Count__c = c.Number_of_Recipients__c;
        a.New_Balance__c = c.Billing_Account__r.eBroadcast_Email_Balance__c + c.Number_of_Recipients__c;
        a.Activity_Type__c = 'Credit';
        a.Activity_Date_Time__c  = Datetime.now();
        insert a;
    }
    
    public static void FileSizeMaximum(){
        List<EBC_Setup__c> setup = new List<EBC_Setup__c>();
                setup=[Select Default_Storage_Capacity__c,
                       			Maximum_File_Size_Upload__c
                            From EBC_Setup__c
                            Limit 1];
        if (setup.size()>0) {STORAGE_CAPACITY=setup[0].Default_Storage_Capacity__c;}
        if (setup.size()>0) {FILE_SIZE_MAX=setup[0].Maximum_File_Size_Upload__c;}
        
        
    }
    public static String getSOQLFromMasterFilter(List<String> columns, Id masterFilterId) {
        EBC_Master_Filter__c masterFilter = [
            SELECT Id,
            Audience__c,
            Geo_Condition__c,
            Refinement_Condition__c,
            Billing_Account__c,
            IATA_Codes__c,
            (
                Select Id,
                Field_Name__c,
                Field_Operator__c,
                Field_Value__c,
                EBC_Application_Filter__r.Filter_Field__c,
                EBC_Application_Filter__r.Search_Level__c,
                EBC_Application_Filter__r.Filter_RelatedList__c,
                EBC_Application_Filter__r.Filter_RelatedList_Field__c
                From EBC_Customer_Filters__r
            )
            FROM EBC_Master_Filter__c
            WHERE Id = :masterFilterId
        ];
         
        return getSOQLFromMasterFilter(columns, masterFilter); 
    }
    public static String getSOQLFromMasterFilter(List<String> columns, EBC_Master_Filter__c masterFilter) {
        List<String> queryFields = new List<String>();
        List<String> queryGeoFilters = new List<String>();
        List<String> queryRefinementFilters = new List<String>();
        String table = (masterFilter.Audience__c == 'Agent' ? 'ID_Card__c' : 'GDP_Products_Account_View__c');
        String emailField = (table == 'ID_Card__c' ? 'Email__c' : 'Email_Address__c');
        
        if (columns == null) {
            queryFields.add('COUNT_DISTINCT(' + emailField + ')');
        } else {
            queryFields.addAll(columns);
        }
        
        for(EBC_Customer_Filter__c cf : masterFilter.EBC_Customer_Filters__r) {
            if (String.isBlank(cf.Field_Operator__c) || (String.isBlank(cf.EBC_Application_Filter__c) && cf.EBC_Application_Filter__r == null)) continue;
            
            System.debug(masterFilter.Geo_Condition__c);
            
            String fieldName = cf.Field_Name__c;
            String searchLevel = cf.EBC_Application_Filter__r.Search_Level__c;
            EBC_Application_Filter__c af = cf.EBC_Application_Filter__r;
            System.debug(cf);
            System.debug(af);
            System.debug(cf.EBC_Application_Filter__c);
            if (af == null && cf.EBC_Application_Filter__c != null) {
                af = [Select Id, Filter_Field__c, Search_Level__c, Filter_RelatedList_Field__c, Filter_RelatedList__c From EBC_Application_Filter__c Where Id = :cf.EBC_Application_Filter__c];
                System.debug(af);
                fieldName = af.Filter_Field__c;
                searchLevel = af.Search_Level__c;
            }
            
            String filterValue = cf.Field_Value__c;
            if (cf.Field_Operator__c != 'in' && cf.Field_Operator__c != 'not in') {
                filterValue = '\'' + String.escapeSingleQuotes(filterValue) + '\'';
            }
            
            String filter = fieldName + ' ' + cf.Field_Operator__c + ' ' + filterValue;
            
            if (af.Filter_RelatedList__c != null) {
                filter = 'id in (Select ' + af.Filter_RelatedList_Field__c  + ' From ' + af.Filter_RelatedList__c + ' Where ' + filter + ')';
            }
            
            if (searchLevel == 'Geo-Selection') {
                if (masterFilter.Audience__c == 'Agent') { 
                    queryGeoFilters.add('GDP_Products_Account_View__c  in (Select Id From GDP_Products_Account_View__c Where ' + filter + ')');
                } else {
                    queryGeoFilters.add(filter);
                }
            } else {
                queryRefinementFilters.add(filter);
            }
        }
        
        System.debug(masterFilter);
        
        String query = 'Select ' + String.join(queryFields, ', ') + ' ';
        System.debug(masterFilter.Audience__c);
        query += 'From ' + table + ' ';
        
        List<String> queryWhereClauses = new List<String>();
        queryWhereClauses.add(emailField + ' != null');
        
        if (masterFilter.Audience__c == 'Custom') {
            if (!String.isBlank(masterFilter.IATA_Codes__c)) {
            	queryWhereClauses.add('IATA_Code__c in (\'' + String.join(masterFilter.IATA_Codes__c.split(';'), '\',\'') + '\')');
            }
        } else {
            System.debug(masterFilter);
            System.debug(queryGeoFilters);
            
            if (queryGeoFilters.size() > 0) {
                // Adding geo filtering
                System.debug(masterFilter.Geo_Condition__c);
                queryWhereClauses.add('(' + String.join(queryGeoFilters, ' ' + masterFilter.Geo_Condition__c + ' ') + ')');
            }
            if (queryRefinementFilters.size() > 0) {
                // Adding geo filtering
                queryWhereClauses.add('(' + String.join(queryRefinementFilters, ' ' + masterFilter.Refinement_Condition__c + ' ') + ')');
            }
        }
        
        
        query += 'Where ' + String.join(queryWhereClauses, ' AND ');
        
        
        if (columns != null) {
            query += ' ORDER BY ' + emailField;
        }
        
        System.debug(query);
        return query;
    }
    
    
    public static Decimal STORAGE_CAPACITY=1; //in mg
    public static Decimal FILE_SIZE_MAX=1; //in mg
    
    public static Decimal getBillingAccountCurrentStorageUsage(Id billingAccountId) {
        AggregateResult[] groupedResults = [Select Sum(Image_Size__c) From EBC_Resource__c
                                            Where Billing_Account__c=:billingAccountId];
        //Control over STORAGE CAPACITY
        Decimal mb=0;
        for (AggregateResult ar : groupedResults)  {
            //MB
            if (ar.get('expr0')==null) continue;
            mb = Decimal.ValueOf(String.ValueOf(ar.get('expr0')));
        }
        
        return mb;
    }
    
    public class Resource_Invalid_Attachment_Exception extends Exception{}
    public class Attachment_Size_Exceeds_Capacity_Exception extends Exception{}
    public class Resource_Name_Already_Exists_Exception extends Exception{}
    
    public static void createResourceForAttachment(Attachment a, Zuora__CustomerAccount__c billingAccount) {
		if (String.isBlank(a.name) || a.body == null)  throw new Resource_Invalid_Attachment_Exception('Attachment must have a valid name or name too long (max 80 characters).');
        if (a.name.length()>80) throw new Resource_Invalid_Attachment_Exception('Attachment name must have be less 80 characters long.');
        String types = a.Name.right(3);
        String typel = a.Name.right(4);
        String typen='';
        Set<String> extension = new Set<String>{'jpg', 'jpeg', 'gif', 'png', 'tiff', 'bmp'};
        if (extension.contains(types)) typen=types; 
        if (extension.contains(typel)) typen=typel; 
        if (typen.equals('')) throw new Resource_Invalid_Attachment_Exception('Attachment extension must be of the following type: .jpg, .jpeg, .gif, .png, .tiff, .bmp');
        FileSizeMaximum();
        // Checking capacity
        Decimal mb = getBillingAccountCurrentStorageUsage(billingAccount.Id);
        String bodyEncoded = EncodingUtil.base64Encode(a.body);  
        Decimal mk = bodyEncoded.length();
        
        //file larger than maximum allowed
        if ((mk/(1024*1024)>FILE_SIZE_MAX)) throw new Attachment_Size_Exceeds_Capacity_Exception('Attachment size exceeds Maximum File Size allowed ('+String.ValueOf(FILE_SIZE_MAX)+' MB.)');
        
        mb = mb +mk;
        mb = (mb / (STORAGE_CAPACITY * 1024*1024))*100;
        if (mb>=105) {
            throw new Attachment_Size_Exceeds_Capacity_Exception('Attachment size exceeds total storage capacity allowed ('+String.ValueOf(STORAGE_CAPACITY)+' MB.)');
        }
        
        // Checking if file name is already used
        List<EBC_Resource__c> resourcelist= new List<EBC_Resource__c>();
        resourcelist = [Select id From EBC_Resource__c
                       			Where name=:a.name
                       			and Billing_Account__c=:billingAccount.Id
                       Limit 1];
       // if (resourcelist.Size()>0) {
        //    throw new Resource_Name_Already_Exists_Exception('A resource with the same name already exists');
        //}
        
        // Create EBC Resource
        
        EBC_Resource__c res = new EBC_Resource__c();
        res.Billing_Account__c=billingAccount.Id;
        res.name = a.name;
        res.Image_Size__c = bodyEncoded.length();
        res.Image_Type__c = typen; 
        insert res;
        
        a.ParentId = res.Id;
    }

    public static String insertResourceForAttachment(Attachment a, Zuora__CustomerAccount__c billingAccount) {
		if (String.isBlank(a.name) || a.body == null)  return 'Attachment must have a valid name or name too long (max 80 characters).';
        if (a.name.length()>80) return 'Attachment name must have be less 80 characters long.';
        String types = a.Name.right(3);
        String typel = a.Name.right(4);
        String typen='';
        Set<String> extension = new Set<String>{'jpg', 'jpeg', 'gif', 'png', 'tiff', 'bmp'};
        if (extension.contains(types)) typen=types; 
        if (extension.contains(typel)) typen=typel; 
        if (typen.equals('')) return 'Attachment extension must be of the following type: .jpg, .jpeg, .gif, .png, .tiff, .bmp';
        FileSizeMaximum();
        // Checking capacity
        Decimal mb = getBillingAccountCurrentStorageUsage(billingAccount.Id);
        String bodyEncoded = EncodingUtil.base64Encode(a.body);  
        Decimal mk = bodyEncoded.length();
        
        //file larger than maximum allowed
        if ((mk/(1024*1024)>FILE_SIZE_MAX)) return 'Attachment size exceeds Maximum File Size allowed ('+String.ValueOf(FILE_SIZE_MAX)+' MB.)';
        
        mb = mb +mk;
        mb = (mb / (STORAGE_CAPACITY * 1024*1024))*100;
        if (mb>=105) return 'Attachment size exceeds total storage capacity allowed ('+String.ValueOf(STORAGE_CAPACITY)+' MB.)';
        
        
        // Checking if file name is already used
        List<EBC_Resource__c> resourcelist= new List<EBC_Resource__c>();
        resourcelist = [Select id From EBC_Resource__c
                       			Where name=:a.name
                       			and Billing_Account__c=:billingAccount.Id
                       Limit 1];
       // if (resourcelist.Size()>0) {
        //    throw new Resource_Name_Already_Exists_Exception('A resource with the same name already exists');
        //}
        
        // Create EBC Resource
        
        EBC_Resource__c res = new EBC_Resource__c();
        res.Billing_Account__c=billingAccount.Id;
        res.name = a.name;
        res.Image_Size__c = bodyEncoded.length();
        res.Image_Type__c = typen; 
        insert res;
        
        a.ParentId = res.Id;
        return '';
    }    
	// =======================================================================-
	// ebcSetup return the only EBC_Setup records in the system
	// in case there is none (should not be the case), it return a blank record.
	public static EBC_Setup__c ebcSetup {
		get {
			if (ebcSetup==null)
			{
				List<EBC_Setup__c> ebcSetupList = [select Id, Name
								, Member_Email_Block_Product__c
								, Member_Prepaid_Product_Rate_Plan_01__c
								, Member_Prepaid_Product_Rate_Plan_02__c
								, Member_Prepaid_Product_Rate_Plan_03__c
								, Member_Prepaid_Product_Rate_Plan_04__c

								, Non_Member_Email_Block_Product__c
								, Non_Member_Prepaid_Product_Rate_Plan_01__c
								, Non_Member_Prepaid_Product_Rate_Plan_02__c
								, Non_Member_Prepaid_Product_Rate_Plan_03__c
								, Non_Member_Prepaid_Product_Rate_Plan_04__c
								
								, Enhanced_Reporting_Product_Rate_Plan__c
								, Storage_Product_Rate_Plan__c
								
								, Default_Storage_Capacity__c
								, E_Commerce_Base_Url__c
								, Product_Category__c
								, Renewal_Window__c
							from EBC_Setup__c
							order by CreatedDate
							limit 1];
				ebcSetup = (ebcSetupList.size()==1) ? ebcSetupList[0] : new EBC_Setup__c (Name = 'Blank');
			}
			return ebcSetup;
		}
		set;
	} // end of ebcSetup getter/setter
	
    public static Set<Id> ebcAddOnProductRatePlanAllIdSet {
        get {
            if (ebcAddOnProductRatePlanAllIdSet == null) {
            	Set<Id> allIdSet = new Set<Id>();
            	if (ebcSetup!=null) {
                	allIdSet.add(ebcSetup.Storage_Product_Rate_Plan__c);
                	allIdSet.add(ebcSetup.Enhanced_Reporting_Product_Rate_Plan__c);
            	}
                ebcAddOnProductRatePlanAllIdSet = allIdSet;
            } // end if
            return ebcAddOnProductRatePlanAllIdSet;
        }
        private set;
    }
    
    // ebcMemberProductRatePlanIdList list all the available Prepaid Product Rate Plan for eBroadcast product for Member
    // the order is maintaned that the first is the one with highest value
    public static List<Id> ebcMemberProductRatePlanIdList{
        get {
            if (ebcMemberProductRatePlanIdList == null) {
                List<Id> memberRatePlanIdList = new List<Id>();
				if (ebcSetup.Member_Prepaid_Product_Rate_Plan_01__c != null)  memberRatePlanIdList.add(ebcSetup.Member_Prepaid_Product_Rate_Plan_01__c);
				if (ebcSetup.Member_Prepaid_Product_Rate_Plan_02__c != null)  memberRatePlanIdList.add(ebcSetup.Member_Prepaid_Product_Rate_Plan_02__c);
				if (ebcSetup.Member_Prepaid_Product_Rate_Plan_03__c != null)  memberRatePlanIdList.add(ebcSetup.Member_Prepaid_Product_Rate_Plan_03__c);
				if (ebcSetup.Member_Prepaid_Product_Rate_Plan_04__c != null)  memberRatePlanIdList.add(ebcSetup.Member_Prepaid_Product_Rate_Plan_04__c);
            	ebcMemberProductRatePlanIdList = memberRatePlanIdList;
            }
            return ebcMemberProductRatePlanIdList;
        }
        
        private set;
    } // end of ebcMemberProductRatePlanIdList getter/setter
    
    // ebcNonMemberProductRatePlanIdList list all the available Prepaid Product Rate Plan for eBroadcast product for Member
    // the order is maintaned that the first is the one with highest value
    public static List<Id> ebcNonMemberProductRatePlanIdList{
        get {
            if (ebcNonMemberProductRatePlanIdList == null) {
                List<Id> nonMemberRatePlanIdList = new List<Id>();
				if (ebcSetup.Non_Member_Prepaid_Product_Rate_Plan_01__c != null)  nonMemberRatePlanIdList.add(ebcSetup.Non_Member_Prepaid_Product_Rate_Plan_01__c);
				if (ebcSetup.Non_Member_Prepaid_Product_Rate_Plan_02__c != null)  nonMemberRatePlanIdList.add(ebcSetup.Non_Member_Prepaid_Product_Rate_Plan_02__c);
				if (ebcSetup.Non_Member_Prepaid_Product_Rate_Plan_03__c != null)  nonMemberRatePlanIdList.add(ebcSetup.Non_Member_Prepaid_Product_Rate_Plan_03__c);
				if (ebcSetup.Non_Member_Prepaid_Product_Rate_Plan_04__c != null)  nonMemberRatePlanIdList.add(ebcSetup.Non_Member_Prepaid_Product_Rate_Plan_04__c);
            	ebcNonMemberProductRatePlanIdList = nonMemberRatePlanIdList;
            }
            return ebcNonMemberProductRatePlanIdList;
        }
        
        private set;
    } // end of ebcNonMemberProductRatePlanIdList getter/setter

    // renewalPageUrl return the complete URL for the renewal page from the community page
    public static String renewalPageUrl {
        get {
            String theUrl =  IECEBC_Utility.ebcSetup.E_Commerce_Base_Url__c + '/IECProductViewer?ProductCode=' + IECUtil.EncryptEncodeParameter(IECConstants.ProductCategory_SF_EBROADCAST);
            return theUrl;
        }
    } // end of renewalPageUrl getter
    
}