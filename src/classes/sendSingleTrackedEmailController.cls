public with sharing class sendSingleTrackedEmailController {

    public map<String,Sender_Tracked_Emails__c> SENDER_TRACKED_EMAILS = Sender_Tracked_Emails__c.getAll();

    public Tracked_Email__c email {get; set;}

    public Case cse {get;set;}

    public String caseUpdateType {get;set;}
    
    // This variable is not used anymore. It stays here for deployment reasons
    public Boolean isNew {
        get {return this.email.Id==null;}
    }

    public String caseThreadId {get{if(caseThreadId == null){caseThreadId = '';} return caseThreadId;} set;}

    public sendSingleTrackedEmailController thisController {
        get{ return this; }
    }
    
    public Boolean showTemplatePanel {get;set;}
    public Boolean showRecipientsPanel {get;set;}
    public Boolean showAttachmentsPanel {get;set;}
    public Boolean showPreviewPanel {get;set;}
    
    public Map<String, SelectTrackedEmailAttachmentsController.DocumentSkeleton> documentMap{
        get{
            if(documentMap == null){
                documentMap = new Map<String,SelectTrackedEmailAttachmentsController.DocumentSkeleton>();
            }
            return documentMap;
        }
        set;
    }
    
    public List<String> documents {get{return new List<String>(documentMap.keySet());}}
    
    public Boolean isDocumentMapEmpty{
        get{
            return documentMap == null || documentMap.isEmpty();
        }
    }
    
    public Set<Id> uploadedDocuments = new Set<Id>();
    
    public String selectedFrom {
        get{
            if(selectedFrom == null && ApexPages.currentPage().getParameters().get('sender') != null){
                selectedFrom = ApexPages.currentPage().getParameters().get('sender');
            }
            else if(email.FromAddress__c != null){
                selectedFrom = email.FromAddress__c;
            }
            return selectedFrom;
        }
        set {
            email.FromAddress__c = value;
            for(String name : SENDER_TRACKED_EMAILS.keySet()){
                if(SENDER_TRACKED_EMAILS.get(name).email__c == value){
                    email.FromName__c = name;
                }
            }
        }
    }

    public list<SelectOption> fromAddresses; 
    
    public list<SelectOption> getFromAddresses() {
        if(fromAddresses == null){
            fromAddresses = new List<SelectOption>();
            for ( Sender_Tracked_Emails__c ste: SENDER_TRACKED_EMAILS.values() ) {
                String value = '"' + ste.name + '" <' + ste.email__c + '>';
                fromAddresses.add(new SelectOption(ste.email__c, value));
            }
        }
        return fromAddresses;
    }

    public EmailTemplate emailTemplate {get;set;}

    public String bodyHeader {get;set;}
    public String bodyFooter {get;set;}
    
    public String rawText {get;set;}
    public String plainText {get;set;}
    
    public Boolean isBodyEditable {
        get{ if(isBodyEditable == null){ isBodyEditable = true; } return isBodyEditable;}
        set; 
    }
    
    public Boolean isSwitchable {
        get{ if(isSwitchable == null){ isSwitchable = true; } return isSwitchable;}
        set;
    }
    
    public Boolean isHtml {
        get{ if(isHtml == null){ isHtml = false; } return isHtml;}
        set;
    }
    
    public Boolean sendEmail {
        get{ if(sendEmail == null){ sendEmail = false; } return sendEmail;}
        set;
    }
    
    public sendSingleTrackedEmailController(ApexPages.StandardController stdController) {
        list<String> listFields = new list<String>{'ToContact__c', 'TextBody__c', 'Html_Body__c', 'Subject__c', 'Signaturit_Id__c', 'FromAddress__c', 'FromName__c', 'CcAddress__c', 'Case__c', 'BccAddress__c', 'AdditionalTo__c'};
        if (!Test.IsRunningtest()) stdController.addFields(listFields);
        email = (Tracked_Email__c)stdController.getRecord();
    }

    public void initPage(){
        if (email != null && email.Id == null ) {
            try {
                email = createNewEmail();

                String templateDeveloperName = ApexPages.currentPage().getParameters().get('template');

                if(templateDeveloperName != null){
                    setTemplate(templateDeveloperName);
                }
                
                caseUpdateType = ApexPages.currentPage().getParameters().get('caseUpdateType');
                
            } catch (Exception e) {
                ApexPages.addmessage(new ApexPages.message(ApexPages.severity.ERROR,'A valid case is required' ));
            }
        }
        
        bodyHeader = '';
        bodyFooter = '';
    }

    private Tracked_Email__c createNewEmail() {
        String originalEmail = ApexPages.currentPage().getParameters().get('originalEmail');
        String action = ApexPages.currentPage().getParameters().get('action');
        
        String toContactId = '';
        String additionalTo = '';
        String ccAddress = '';
        String bccAddress = '';
        String subject = '';
        String textBody = '';
        String htmlBody = '';
        
        if(originalEmail == null || (action != 'ReplyTo' && action != 'ReplyToAll' && action != 'Forward')){
            Id caseId = ApexPages.currentPage().getParameters().get('case');
            cse = [Select Id, AccountId, Account.name, Contact.email, Contact.name, Case_Thread_ID__c from Case where Id = :caseId ];
        
            if (ApexPages.currentPage().getParameters().get('toContact') != null) {
                toContactId = ApexPages.currentPage().getParameters().get('toContact');
            }
            else {
                toContactId = cse.ContactId;
            }

            if(ApexPages.currentPage().getParameters().get('sendToUser') == 'true'){
                bccAddress = UserInfo.getUserEmail();
            }
            
            caseThreadId = cse.Case_Thread_ID__c;
        }
        else{
            Tracked_Email__c email = [select Id, Case__c, FromName__c, FromAddress__c, ToContact__c, CreatedDate, Email__c, AdditionalTo__c, CcAddress__c, Subject__c, BccAddress__c, Html_Body__c, TextBody__c from Tracked_Email__c where Id =: originalEmail];
            
            cse = [Select Id, AccountId, Account.name, Contact.email, Contact.name from Case where Id = :email.Case__c ];

            bccAddress = email.BccAddress__c;
            
            rawText = SignaturitUtils.pStyle + '<br/><br/><br/>'
                        + '--------------- Original Message ---------------<br/>'
                        + '<b>From:</b> "' + email.FromName__c + '" <' + email.FromAddress__c + '> [' + email.FromAddress__c + ']<br/>'
                        + '<b>Sent:</b> '+ email.CreatedDate +'<br/>'
                        + '<b>To:</b> '+ email.Email__c + (email.AdditionalTo__c != null && email.AdditionalTo__c !='' ? ';' + email.AdditionalTo__c : '') + '<br/>'
                        + '<b>Cc:</b> '+  (email.CcAddress__c != null && email.CcAddress__c !='' ? ';' + email.CcAddress__c : '')+ '<br/>'
                        + '<b>Subject:</b> '+ email.Subject__c + '<br/><br/>'
                        + email.Html_Body__c.replace('p{margin-top:0px; margin-bottom:0px;}', '');
                        
            isHtml = true;
            
            if(action == 'ReplyTo'){
                subject = 'RE: ' + email.Subject__c;
                toContactId = email.ToContact__c;
            }
            else if(action == 'ReplyToAll'){
                subject = 'RE: ' + email.Subject__c;
                toContactId = email.ToContact__c;

                additionalTo = email.AdditionalTo__c;
                ccAddress = email.CcAddress__c;
            }
            else{
                subject = 'FW: ' + email.Subject__c;
                toContactId = null;
                
                // Add attachments of the original email if any
                List<Attachment> attachments = [select Id, Name, BodyLength from Attachment where parentId =: originalEmail];
                
                if(!attachments.isEmpty()){        
                    for(Attachment attachment : attachments){
                        documentMap.put(attachment.Id, new SelectTrackedEmailAttachmentsController.DocumentSkeleton(attachment.Name, attachment.BodyLength, 'original attachment'));
                    }
                }
            }
        }
        
        return new Tracked_Email__c(
            Case__c = cse.Id,
            ToContact__c = toContactId,
            AdditionalTo__c = additionalTo,
            CcAddress__c = ccAddress,
            BccAddress__c = bccAddress,
            Subject__c = subject,
            TextBody__c = textBody,
            Html_Body__c = htmlBody,
            Status__c = SignaturitRestEvents.SENT
        );
    }
    
	// This method is not used anymore. It stays here for deployment reasons
	public void applyTemplate(){
    }
    
    public void setTemplate(String templateDeveloperName){
        emailTemplate = [select Id, Name, Subject, Body, HtmlValue, Markup, BrandTemplateId, TemplateStyle, TemplateType, Encoding from EmailTemplate where DeveloperName = :templateDeveloperName][0];
        setTemplate();    
    }
    
    public void setTemplate(Id templateId){
        emailTemplate = [select Id, Name, Subject, Body, HtmlValue, Markup, BrandTemplateId, TemplateStyle, TemplateType, Encoding from EmailTemplate where Id = :templateId];
        setTemplate();    
    }
    
    public void setTemplate(){        
        // Send a fake email with this message in order to update the subject and the body if necessary
        Savepoint sp = Database.setSavepoint();
        
        if(emailTemplate.TemplateType == 'html' && !Test.isRunningTest()){
            // We need to update the template to determinate precisely where the body starts and ends after the fake body is sent 
            emailTemplate.HtmlValue = emailTemplate.HtmlValue.replace('<![CDATA[','<![CDATA[BODY_START').replace(']]>','BODY_END]]>');
            update emailTemplate;
        }

        Tracked_Email__c trackedEmail = SignaturitRest.sendDummyEmail(new List<SignaturitRest.DummyEmail>{new SignaturitRest.DummyEmail(emailTemplate, cse, cse.ContactId)})[0];

        Database.rollback(sp);

        // Update data
        email.Subject__c = trackedEmail.Subject__c;
        
        bodyHeader = '';
        bodyFooter = '';

        // Update data depending on the template type
        if(emailTemplate.TemplateType == 'custom'){
            rawText = SignaturitUtils.pStyle + trackedEmail.Html_Body__c;

            isHtml = true;
            isBodyEditable = false;
            isSwitchable = false;
        }
        else if(emailTemplate.TemplateType == 'html'){
            // Store body header and footer values for further use
            bodyHeader = trackedEmail.Html_Body__c.substringBefore('BODY_START');
            Integer start = bodyHeader.indexOf('<body');
            if(start > 0){
                bodyHeader = bodyHeader.substring(start);
            }
            bodyHeader = addPx(bodyHeader);

            bodyFooter = trackedEmail.Html_Body__c.substringAfter('BODY_END');
            bodyFooter = addPx(bodyFooter);
            
            rawText = SignaturitUtils.pStyle + trackedEmail.Html_Body__c.substringAfter('BODY_START').substringBefore('BODY_END');

            System.debug('rawText : ' + rawText);

            
            isHtml = true;
            isBodyEditable = true;
            isSwitchable = false;
        }
        else if(emailTemplate.TemplateType == 'text'){
            plainText = trackedEmail.TextBody__c;
            
            isHtml = false;
            isBodyEditable = true;
            isSwitchable = true;
        }
        else if(emailTemplate.TemplateType == 'visualforce'){
            if(emailTemplate.Markup.contains('messaging:htmlEmailBody')){
                rawText = SignaturitUtils.pStyle + trackedEmail.Html_Body__c;

                isHtml = true;
                isBodyEditable = false;
                isSwitchable = false;
            }
            else{
                plainText = trackedEmail.TextBody__c;

                isHtml = false;
                isBodyEditable = true;
                isSwitchable = true;
            }
        }
        
        // Handle Template attachments
        // if we change for a new template, attachments of the preivous template must be removed
        for(String key : documentMap.keySet()){
            if(documentMap.get(key).type == 'template attachment'){
                documentMap.remove(key);
            }
        }
          
        //Add selected template attachments if any
        List<Attachment> templateAttachments = [select Name, BodyLength from Attachment where ParentId =: emailTemplate.Id];

        for(Attachment attachment : templateAttachments){
            documentMap.put(attachment.Id, new SelectTrackedEmailAttachmentsController.DocumentSkeleton(attachment.Name, attachment.BodyLength, 'template attachment'));
        }
    }
    
    private String addPx(String incompleteString){
        List<String> parts = incompleteString.split('height:');
        
        String completeString = parts[0];
        
        for(Integer i = 1; i < parts.size(); i++){
            String value = parts[i].substringBefore(';');

            completeString += 'height:' + value;
            if(! value.endsWith('px')){
                completeString += 'px';
            }
            completeString += ';' + parts[i].substringAfter(';');
        }
        
        return completeString;
    }
    
    public void switchToHtml(){
        isHtml = true;
        rawText = SignaturitUtils.pStyle + plainText.replaceAll('\r\n', '<br>').replaceAll('\n\r', '<br>').replaceAll('\n', '<br>');
    }

    public void switchToTextOnly(){
        isHtml = false;
        plainText = rawText != null? rawText.replace(SignaturitUtils.pStyle, '').replaceAll('</p>', '</p><br/>').stripHtmlTags() : '';
    }
    
    public void discardTemplate(){
        emailTemplate = null;
        bodyHeader = '';
        bodyFooter = '';
        rawText = '';
        plainText = '';
        isBodyEditable = null;
        isSwitchable = null;
        isHtml = null;
        
        //Discard documents or not?
        // documentMap.clear();
    }

    // Check that mandatory fields are filled
    private Boolean checkFields() {
        Boolean result = true;
        if (email.ToContact__c == null) {
            email.ToContact__c.addError('Field is mandatory');
            result = false;
        }
        if (email.Subject__c == null ) {
            email.Subject__c.addError('Field is mandatory');
            result = false;
        }
        if (email.Html_Body__c == null ) {
            email.Html_Body__c.addError('Field is mandatory');
            result = false;
        }
        return result;
    }
    
    public PageReference deleteAttachment(){
        SelectTrackedEmailAttachmentsController.DocumentSkeleton doc = documentMap.remove(documentToDelete);

        if(doc.type == 'uploaded document'){
            Document document = [select Id from Document where Id =: documentToDelete];
            delete document;
        }

        return null;
    }
    
    public String documentToDelete {get;set;}
    
    public PageReference saveTrackedEmail(){
        if (!checkFields()){
            return null;
        }
        
        email.Has_Attachment__c = documentMap.keySet().size() > 0;
        
        if(!email.Subject__c.endsWith(caseThreadId)){
            email.Subject__c += caseThreadId != '' ? ' ' + caseThreadId : '';
        }
        
        if(isHtml){
            email.IsHtml__c = true;
            if(Test.isRunningTest()){
                email.Html_Body__c = (rawText != null? rawText.unescapeHtml4() : '');
            }
            else{
                email.Html_Body__c = bodyHeader + (rawText != null? rawText.unescapeHtml4() : '') + bodyFooter;
                if(!email.Html_Body__c.contains(caseThreadId)){
                    email.Html_Body__c += caseThreadId != '' ? '<br/><br/>' + caseThreadId : '';
                }
            }
            email.TextBody__c = (rawText != null? rawText.replaceAll('</p>', '</p><br/>').stripHtmlTags() : '') + '\r\n' + caseThreadId;
        }
        else{
            email.IsHtml__c = false;
            email.Html_Body__c = (plainText != null ? plainText.replaceAll('\r\n', '<br>').replaceAll('\n\r', '<br>').replaceAll('\n', '<br>') : '');

            if(!email.Html_Body__c.contains(caseThreadId)){
                email.Html_Body__c += caseThreadId != '' ? '<br/><br/>' + caseThreadId : '';
            }
            
            email.TextBody__c = (plainText != null ? plainText : '');
            if(!email.TextBody__c.contains(caseThreadId)){
                email.TextBody__c += caseThreadId != '' ? '\r\n' + caseThreadId : '';
            }
        }

        insert email;

        // Create Attachments linked to the Tracked Email record
        List<Attachment> attachments = new List<Attachment>();

        // This list will contain salesforce documents and uploaded documents
        List<Document> documents = [select Name, Body, ContentType from Document where Id in :documentMap.keySet()];
        for(Document document : documents){
            Attachment attachment = new Attachment(
                                            OwnerId = UserInfo.getUserId(),
                                            ParentId = email.Id,
                                            IsPrivate = true,
                                            Body = document.Body,
                                            Name = document.Name);
            attachments.add(attachment);
        }

        // This list will contain original email attachments (in case of forward) and template attachments 
        List<Attachment> atts = [select Name, Body, ContentType from Attachment where Id in :documentMap.keySet()];
        for(Attachment att : atts){
            Attachment attachment = new Attachment(
                                            OwnerId = UserInfo.getUserId(),
                                            ParentId = email.Id,
                                            IsPrivate = true,
                                            Body = att.Body,
                                            Name = att.Name);
            attachments.add(attachment);
        }
        
        insert attachments;
        
        //delete the uploaded documents
        List<String> uploadedDocumentIds = new List<String>();
        for(String key : documentMap.keySet()){
            if(documentMap.get(key).type == 'uploaded document'){
                uploadedDocumentIds.add(key);
            }
        }
        
        if(!uploadedDocumentIds.isEmpty()){
            List<Document> documentsToDelete = [select Id from Document where Id in : uploadedDocumentIds];
            delete documentsToDelete;
        }
        
        sendEmail = true;
        
        return null;
    }
    
    /**
    Save current emailmessage plus the Tracked Email object
    **/
    public PageReference sendTrackedEmail() {
        try{
            // Send the email with signaturit       
            SignaturitRest.MailInfoResponse response = SignaturitRest.sendMail(email);
            
            if (response == null || response.status_code != null) {
                if(response == null){
                    ApexPages.addMessage(new ApexPages.Message(ApexPages.Severity.ERROR,'<b><u>Sending failure</u></b><br/>no response'));
                }
                else{
                    ApexPages.addMessage(new ApexPages.Message(ApexPages.Severity.ERROR,'<b><u>Sending failure</u> <br/> Status code</b> : ' + response.status_code + '<br/><b>Message</b> : ' + response.message));
                }

                deleteEmail();
                email.Id = null;
                sendEmail = false;
                
                return null;
            }           

            // Insert the Tracked Email record
            email.Signaturit_Id__c = response.id;


            //email.Signaturit_Certificate_Ids__c = String.join(response.getCertificateIds(),';');
            update email;
            
            insert SignaturitUtils.getCertificatesFromResponse(email.Id, response);

			// Update the case if email is FA or FS request
			if(caseUpdateType == 'FA'){
				cse.FA_Letter_Sent__c = true;
				cse.Status = 'Agent Notified (Email)';
				update cse;
			}
			else if(caseUpdateType == 'FS'){
				cse.FS_Letter_Sent__c = true;
				cse.Status = 'Financial Security Requested';
				update cse;
			}

            String retURL = ApexPages.CurrentPage().getParameters().get('retURL');
            String url = retUrl==null? '/' + cse.Id : retURL;
            PageReference pageref = new PageReference(url);
            pageref.setRedirect(true);
            return pageref;
            
        } catch ( Exception e) {
            ApexPages.addMessage(new ApexPages.Message(ApexPages.Severity.ERROR,'Error sending email\r\n' + e.getMessage()));
            
            deleteEmail();
            email.Id = null;
            sendEmail = false;
            
            return null;
        }
    }

    // Delete email and its attachments if sending fails
    private void deleteEmail(){
        // delete tracked email and attachments
        List<Attachment> attachments = [select Id from Attachment where parentId =:email.id];
        if(!attachments.isEmpty()){
            delete attachments;
        }
        delete email;
    }
    
    /**
    Redirect to retURL or home without doing changes
    **/
    public PageReference cancel() {
        String retURL = ApexPages.CurrentPage().getParameters().get('retURL');
        String url = retUrl==null? '/' + cse.Id : retURL;
        PageReference pageref = new PageReference(url);
        pageref.setRedirect(true);
        return pageref;
    }

    public PageReference showRecipientsPanel(){ 
        showRecipientsPanel = true;
        return null;
    }

    public PageReference showTemplatePanel(){ 
        showTemplatePanel = true;
        return null;
    }
     
    public PageReference showAttachmentsPanel(){ 
        showAttachmentsPanel = true;
        return null;
    }
     
    public PageReference showPreviewPanel(){ 
        showPreviewPanel = true;
        return null;
    }
}