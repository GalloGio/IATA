@isTest
private class ISSP_AMS_MSO_Request_Controller_Test {
	
	@isTest static void test_method() {

		Id  programRT  =  TransformationHelper.RtIDsPerDeveloperNamePerObj(new list<string> {'AMS_Segment__c'}).get('AMS_Segment__c').get('IATA_Code_Programs');
    	Id  codeRangeRT  =  TransformationHelper.RtIDsPerDeveloperNamePerObj(new list<string> {'Code_Range__c'}).get('Code_Range__c').get('IATA_Code');

    	AMS_Segment__c p1 = new AMS_Segment__c (label__c='M',RecordTypeId=programRT );
    	insert p1;
		
        Id conRtId = TransformationHelper.RtIDsPerDeveloperNamePerObj(new list<string> {'Contact'}).get('Contact').get('Standard_Contact');//[SELECT Id FROM RecordType WHERE DeveloperName ='Standard_Contact' AND SobjectType = 'Contact'].Id;
        Id accRtId = TransformationHelper.RtIDsPerDeveloperNamePerObj(new list<string> {'Account'}).get('Account').get('IATA_Airline');//[SELECT Id FROM RecordType WHERE DeveloperName ='IATA_Airline' AND SobjectType = 'Account'].Id;
        Id agcRtId = TransformationHelper.RtIDsPerDeveloperNamePerObj(new list<string> {'Account'}).get('Account').get('IATA_Agency');// [SELECT Id FROM RecordType WHERE DeveloperName ='IATA_Agency' AND SobjectType = 'Account'].Id;

        IATA_ISO_Country__c isoc = new IATA_ISO_Country__c(Name = 'Test', ISO_Code__c = 'FR', Case_BSP_Country__c='Test');       
        insert isoc;

        IATA_ISO_State__c isos = new IATA_ISO_State__c(Name='Test_state', IATA_ISO_Country__c = isoc.Id, ISO_Code__c='FR');
        insert isos;

        Code_Range__c r1 = new Code_Range__c (Name ='FR1',Area__c=1, 
                                            Area_Code__c=2,Prefix__c='10',IATA_ISO_Country__c=isoc.Id,
                                            IATA_ISO_State__c=isos.Id,Max_Range__c=9999,Min_Range__c=1, ProgramCode__c = 'M', program__c=p1.id,RecordTypeId=codeRangeRT);
        insert r1;

        Account acc = new Account (
			RecordTypeId = accRtId,
			Name = 'Airline HQ', 
			IATACode__c = '012',
            Airline_designator__c = 'HQ',
			IATA_ISO_Country__c = isoc.Id
			);
        insert acc;

        Contact con = new Contact (
			AccountId = acc.id,
			RecordTypeId = conRtId, 
			LastName = 'portalUser',
			FirstName = 'first',
			Email = 'someuser@iata.org',
			User_Portal_Status__c = 'Approved User'
			);
        insert con;


        Profile p = [SELECT Id, Name FROM Profile WHERE Name = 'ISS Portal Airline User (Partner)' LIMIT 1];
         
        User newUser = new User(
			profileId = p.id,
			username = 'someuser@iata.org',
			email = 'someuser@iata.org',
			emailencodingkey = 'UTF-8',
			localesidkey = 'en_US',
			languagelocalekey = 'en_US',
			timezonesidkey = 'America/Los_Angeles',
			alias='nuser',
			lastname='lastname',
			contactId = con.id
			);
        insert newUser;
		
		
        System.runAs(newUser){

        	

      		Test.setCurrentPage(Page.ISSP_AMS_MSO_Request);
            ISSP_AMS_MSO_Request_Controller ctrl = new ISSP_AMS_MSO_Request_Controller();

            /*User currentUser = [SELECT Id, ContactId FROM User WHERE Id = :UserInfo.getUserId()];
            system.assertEquals(con.Id, currentUser.ContactId);
	        Contact currentUserContact = [SELECT Id, AccountId FROM Contact WHERE Id = :currentUser.ContactId];
	        system.assertEquals(acc.Id, currentUserContact.AccountId);
	        Account airlineAccount = [SELECT Id, ParentId, RecordType.DeveloperName, Name, Airline_designator__c FROM Account WHERE Id = :currentUserContact.AccountId];*/

            system.assertEquals('/ISSP_Homepage', ctrl.cancel().getUrl());
            system.assertEquals(null, ctrl.securityCheck());
            
            ctrl.accreditationForm.Branch_Office_Street_name_number__c = 'streetname';
            ctrl.accreditationForm.Branch_Office_City__c = 'cityname';
            ctrl.accreditationForm.Branch_Office_Postal_code__c = '12345';

            // failing because no country & state selected
            system.assertEquals(null, ctrl.save());

            system.assertNotEquals(0, ctrl.countryISOCodeList.size());
            ctrl.countrySelected = isoc.Id;
            ctrl.refreshStates();
            ctrl.billingState = isos.Id;

			Test.startTest();
            	ctrl.save();
            	ctrl.accreditationForm.Accept_terms_and_conditions__c = true;
            	ctrl.submitAndApproveCase();
			Test.stopTest();
			
        }


		list<Case> cases = [SELECT Id, OSCAR__c, Status FROM Case WHERE AccountId = :acc.Id];
		system.assertEquals(1, cases.size());
		system.assertEquals('Closed', cases[0].Status);

		list<AMS_OSCAR__c> oscars = [SELECT Id, Status__c, Account__c FROM AMS_OSCAR__c WHERE Id = :cases[0].OSCAR__c];
		system.assertEquals(1, oscars.size());
		system.assertEquals('Closed', oscars[0].Status__c);

		list<Account> newMSO = [SELECT Id, Location_Class__c, Name, RecordType.DeveloperName, IATACode__c, BillingCity FROM Account WHERE Id = :oscars[0].Account__c];
		system.assertEquals(1, newMSO.size());
		system.assertEquals('Airline HQ',newMSO[0].Name);
		system.assertEquals('IATA_Agency', newMSO[0].RecordType.DeveloperName);
		system.assertEquals('M', newMSO[0].Location_Class__c);
		system.assertNotEquals(null, newMSO[0].IATACode__c);
		system.assertNotEquals(null, newMSO[0].BillingCity);
	}
	
	@isTest static void test_method2() {

		Id  programRT  =  TransformationHelper.RtIDsPerDeveloperNamePerObj(new list<string> {'AMS_Segment__c'}).get('AMS_Segment__c').get('IATA_Code_Programs');
    	Id  codeRangeRT  =  TransformationHelper.RtIDsPerDeveloperNamePerObj(new list<string> {'Code_Range__c'}).get('Code_Range__c').get('IATA_Code');

    	AMS_Segment__c p1 = new AMS_Segment__c (label__c='M',RecordTypeId=programRT );
    	insert p1;
		
        Id conRtId = TransformationHelper.RtIDsPerDeveloperNamePerObj(new list<string> {'Contact'}).get('Contact').get('Standard_Contact');//[SELECT Id FROM RecordType WHERE DeveloperName ='Standard_Contact' AND SobjectType = 'Contact'].Id;
        Id accRtId = TransformationHelper.RtIDsPerDeveloperNamePerObj(new list<string> {'Account'}).get('Account').get('IATA_Airline');//[SELECT Id FROM RecordType WHERE DeveloperName ='IATA_Airline' AND SobjectType = 'Account'].Id;
        Id agcRtId = TransformationHelper.RtIDsPerDeveloperNamePerObj(new list<string> {'Account'}).get('Account').get('IATA_Agency');// [SELECT Id FROM RecordType WHERE DeveloperName ='IATA_Agency' AND SobjectType = 'Account'].Id;

        IATA_ISO_Country__c isoc = new IATA_ISO_Country__c(Name = 'Test', ISO_Code__c = 'FR', Case_BSP_Country__c='Test');       
        insert isoc;

        IATA_ISO_State__c isos = new IATA_ISO_State__c(Name='Test_state', IATA_ISO_Country__c = isoc.Id, ISO_Code__c='FR');
        insert isos;

        Code_Range__c r1 = new Code_Range__c (Name ='FR1',Area__c=1, 
                                            Area_Code__c=2,Prefix__c='10',IATA_ISO_Country__c=isoc.Id,
                                            IATA_ISO_State__c=isos.Id,Max_Range__c=9999,Min_Range__c=1, ProgramCode__c = 'M', program__c=p1.id,RecordTypeId=codeRangeRT);
        insert r1;

        Account acc = new Account (
			RecordTypeId = accRtId,
			Name = 'Airline HQ', 
			IATACode__c = '012',
            Airline_designator__c = 'HQ',
			IATA_ISO_Country__c = isoc.Id
			);
        insert acc;

        Contact con = new Contact (
			AccountId = acc.id,
			RecordTypeId = conRtId, 
			LastName = 'portalUser',
			FirstName = 'first',
			Email = 'someuser@iata.org',
			User_Portal_Status__c = 'Approved User'
			);
        insert con;


        Profile p = [SELECT Id, Name FROM Profile WHERE Name = 'ISS Portal Airline User (Partner)' LIMIT 1];
         
        User newUser = new User(
			profileId = p.id,
			username = 'someuser@iata.org',
			email = 'someuser@iata.org',
			emailencodingkey = 'UTF-8',
			localesidkey = 'en_US',
			languagelocalekey = 'en_US',
			timezonesidkey = 'America/Los_Angeles',
			alias='nuser',
			lastname='lastname',
			contactId = con.id
			);
        insert newUser;
		
		
        System.runAs(newUser){

        	

      		Test.setCurrentPage(Page.ISSP_AMS_MSO_Request);
            ISSP_AMS_MSO_Request_Controller ctrl = new ISSP_AMS_MSO_Request_Controller();

            ctrl.accreditationForm.Branch_Office_Street_name_number__c = 'streetname';
            ctrl.accreditationForm.Branch_Office_City__c = 'cityname';
            ctrl.accreditationForm.Branch_Office_Postal_code__c = '12345';
            ctrl.countrySelected = isoc.Id;
            ctrl.refreshStates();
            ctrl.billingState = isos.Id;

			Test.startTest();
            	ctrl.save();
            	ctrl.save();

            	list<Account> newMSO = [SELECT Id, Name FROM Account WHERE Location_Class__c = 'M' AND Name = 'Airline HQ'];
				system.assertEquals(1, newMSO.size());

				ctrl.cancelRequest();
				newMSO = [SELECT Id, Name FROM Account WHERE Location_Class__c = 'M' AND Name = 'Airline HQ'];
				system.assertEquals(0, newMSO.size());

			Test.stopTest();

			system.assertEquals('', ctrl.commParam);
			system.assertEquals('', ctrl.commParamFirst);
        }
	}
}