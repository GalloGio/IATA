<apex:page id="thePage" controller="AMS_OSCAR_ProcessViewerController" showHeader="false" sidebar="false">
<script type="text/javascript">
var __sfdcSessionId = '{!GETSESSIONID()}';
</script>
<script src="../../soap/ajax/34.0/connection.js" type="text/javascript"></script>
<script src="../../soap/ajax/34.0/apex.js" type="text/javascript"></script>
<script src="{!$Resource.AMS_OSCAR_DynamicActions}" type="text/javascript"></script>
<apex:includeScript value="{!$Resource.jquery2_1_4}"/>
<!-- lightbox resources -->
<apex:includeScript value="{!URLFOR($Resource.AMS_Lightcase, '/lightcase-2.1.1/lightcase.js')}"/>
<apex:stylesheet value="{!URLFOR($Resource.AMS_Lightcase, '/lightcase-2.1.1/css/lightcase.css')}"/>
<!-- tooltip resources -->
<apex:stylesheet value="{!URLFOR($Resource.AMS_Tooltip,'jquery.qtip.css')}"/>
<apex:includeScript value="{!URLFOR($Resource.AMS_Tooltip, 'jquery.qtip.min.js')}"/>
<apex:includeScript value="/support/console/36.0/integration.js"/>
<script type="text/javascript">           
        function refreshTab(){
            if (sforce.console.isInConsole()) {
                sforce.console.getEnclosingTabId(function(enclosingResult){
                    sforce.console.getEnclosingPrimaryTabId(function(primaryResult){
                        sforce.console.refreshPrimaryTabById(primaryResult.id,false,null);
                    });
                });
            } else {
                // for inline Vf
                window.top.location.href = '/'+redirectUrl
                // for normal vf
                // window.location.href = '/'+redirectUrl
            }
        }

        function invokeWS(currentElement) {
          
            var idToUpdate= '{!oscar.Id}';
            
            //get the parent DIV having an id
            while (currentElement && (currentElement.tagName != "DIV" || !currentElement.id)) {
             
                currentElement = currentElement.parentNode;
            }

            //get all the dynamic input fields that need to be updated through the WS.
            //these divs id correspond to the api name of the field to be updated
            var inputDivs = currentElement.getElementsByTagName("DIV");
            
            var fieldsApiName = [];
            var fieldValues = [];
            
            var addedApiName;
            var addedApiValue;
            
            var elem;
            for (i = 0; i < inputDivs.length; i++) {
            
                elem = inputDivs[i];
                
                if (elem.id) {
                    
                    var inputElem = elem.querySelectorAll(".inputElem");
                    
                    if (inputElem != null && inputElem.length > 0) {
                        
                        fieldsApiName.push(elem.id);
                        
                        addedApiName = true;
                        addedApiValue = false;
                        
                        if (inputElem[0] != null) {
                                        
                            // support for multiselect picklist
                            if (inputElem[0].getAttribute("multiple") != null) {
                            
                                var ielem;
                                
                                for (j = 0; j < inputElem.length; j++) {
                                
                                    ielem = inputElem[j];
                                    
                                    if (ielem.firstElementChild != null) {
                                    
                                        if (ielem.firstElementChild.getAttribute("label") == "Chosen") {
                                           
                                            var options = ielem.getElementsByTagName("OPTION");
                                            var parsedOptions = ' ';
                                            
                                            for (k = 0; k < options.length; k++) {
                                                
                                                parsedOptions = parsedOptions.concat(options[k].innerHTML+";");
                                            }
                                            
                                            if (parsedOptions != null) {
                                            
                                                fieldValues.push(parsedOptions);
                                                addedApiValue = true;
                                            } else {
                                                
                                                fieldsApiName.pop();
                                            }
                                        }
                                    }
                                }
                            // checkbox
                            } else if (inputElem[0].getAttribute("type") == "checkbox") {
                                
                                fieldValues.push((inputElem[0].checked).toString());
                                addedApiValue = true;
                            // other
                            } else {
                                
                                if (inputElem[0].value != null) {
                                    
                                    fieldValues.push(inputElem[0].value);
                                    addedApiValue = true;
                                } else {
                                    
                                    fieldsApiName.pop();
                                }
                            }
                        } else {

                            fieldsApiName.pop();
                        }
                        
                        if (addedApiName != addedApiValue) {
                            
                            fieldsApiName.pop();
                        }
                    }
                }
            }

            if (fieldsApiName.length > 0) {
                
                var fieldValueToServer = []; 
                
                // Prevent list with empty value (exception in connection.js)
                for (i = 0; i < fieldValues.length; i++) {
                
                    if (fieldValues[i] == "") {
                                    
                        fieldValueToServer.push(" ");
                    } else {
                        
                        fieldValueToServer.push(fieldValues[i]);
                    }
                }

                sforce.connection.header = null;
                var result = "" + sforce.apex.execute("AMS_OSCAR_Webservice","updateFormFields", 
                                           {fieldsToUpdateKey:fieldsApiName, 
                                            fieldsToUpdateValue:fieldValueToServer,
                                            recordId:idToUpdate});
                if (result.length > 0) {
                
                    alert(result);
                }
            }
        }

        function openSubtab(subtabUrl, subTabTitle)
        {
           // Use the results primary tab id and open a new subtab
           var openSubtab = function(result)
           {            
                sforce.console.openSubtab(result.id, subtabUrl, true, subTabTitle, null);    
           };
           sforce.console.getEnclosingPrimaryTabId(openSubtab);
        }
    </script>

<style>

.bPageBlock .detailList .data2Col {
    text-align: center;
}
.bPageBlock .detailList tr td, .bPageBlock .detailList tr th, .hoverDetail .bPageBlock .detailList tr td, .hoverDetail .bPageBlock .detailList tr th {
     border-bottom: 0px solid #e3deb8;
     border-top: 0px;
}
body .bPageBlock .pbBody .labelCol, body .bPageBlock .pbBody .dataCol, body .bPageBlock .pbBody .data2Col, body .print .topics-label, body .print .topics-list {
    padding-top: 0px;
    padding-bottom: 0px;
    vertical-align: bottom;
}
.bPageBlock th.vfLabelColTextWrap {
    vertical-align: middle;
    position: relative;
    white-space: nowrap;
}

a:link {
    text-decoration: none;
    color:#0056AC;
}
    
h1{
    font-size: 150%;
}

.overlay{
    height: 100%;
    width: 100%;
    position: fixed;
    z-index: 100;
    top: 0;
    left: 0;
    background-color: rgb(0,0,0);
    background-color: rgba(0,0,0, 0.85);
    overflow-x: hidden;
}

.overlay-content {
    position: relative;
    top: 15%;
    width: 100%;
    text-align: center;
    margin-top: 30px;
}

.overlay a:hover, .overlay a:focus {
    color: #f1f1f1;
}

.overlay a:visited {
    color: #666666;
}

.overlay p, ul, li {
    padding: 8px;
    text-decoration: none;
    font-size: 22px;
    color: #818181;
    display: block; /* Display block instead of inline */
    transition: 0.3s; /* Transition effects on hover (color) */
}

.overlay ul, li {
    font-size: 14px;
    color: #818181;
    text-align: left;
    display: block; /* Display block instead of inline */
    line-height: 30%;
}

/* Start by setting display:none to make this hidden.
   Then we position it in relation to the viewport window
   with position:fixed. Width, height, top and left speak
   for themselves. Background we set to 80% white with
   our animation centered, and no-repeating */
.modal {
    display:    none;
    position:   fixed;
    z-index:    1000;
    top:        0;
    left:       0;
    height:     100%;
    width:      100%;
    text-align: center;
    font-size: 22px;
    color: #818181;
    background: rgba( 255, 255, 255, .8 ) 
                url('{!URLFOR($Resource.AMS_Icons, 'ajax-loader.gif')}') 
                50% 50% 
                no-repeat;
}

/* When the body has the loading class, we turn
   the scrollbar off with overflow:hidden */
body.loading {
    overflow: hidden;   
}

/* Anytime the body has the loading class, our
   modal element will be visible */
body.loading .modal {
    display: block;
}

</style>
<script>
function buildFunctionCall(func, argList){
    //if(argList.indexOf('agencyid') > -1)
    //    argList = "{!oscar.Account__c}";
    if(argList.indexOf('agencyid') > -1){
        accountId = '{!oscar.Account__c}';
        argList = argList.replace('agencyid', accountId);
        argList = argList.replace('[','');
        argList = argList.replace(']','');
    }
    if(argList.indexOf('oscarid') > -1){
        oscarId = '{!oscar.Id}';
        argList = argList.replace('oscarid', oscarId);
        argList = argList.replace('[','');
        argList = argList.replace(']','');
    }
    if(argList.indexOf('accreditationid') > -1){
        accreditationId = '{!oscar.AMS_Online_Accreditation__c}';
        argList = argList.replace('accreditationid', accreditationId);
        argList = argList.replace('[','');
        argList = argList.replace(']','');
    }
    if(argList.indexOf('sessionid') > -1){
        sessionid = '{!URLFOR($Action.AMS_OSCAR__c.CongaSession,oscar.Id)}'
        argList = argList.replace('sessionid', sessionid);
        argList = argList.replace('[','');
        argList = argList.replace(']','');
    }
    if(argList.indexOf('partnerserverurl') > -1){
        partnerserverurl = '{!$Api.Partner_Server_URL_80}';
        argList = argList.replace('partnerserverurl', partnerserverurl);
        argList = argList.replace('[','');
        argList = argList.replace(']','');
    }
    if(argList.indexOf('TEMPLATE:') > -1){
        argList = argList.replace('TEMPLATE:', '');
        argList = argList.replace('[','');
        argList = argList.replace(']','');
    }
    if(argList.indexOf('REPORTS:') > -1){
        argList = argList.replace('REPORTS:', '');
        argList = argList.replace('[','');
        argList = argList.replace(']','');
    }
    
    dyn_functions[func](argList);
}
</script>
    
<script>
    $( document ).ready(function() {
        var imgs = document.getElementsByTagName('img');
        var arrayLength = imgs.length;
        for (var i = 0; i < arrayLength; i++) {
            var imgId = imgs[i].id;
            if(imgId.indexOf('img_thePage:oscarForm') > -1){
                twistSection(imgs[i]);
            }
        }
    });
</script>

<apex:pageBlock rendered="{!oscar == null}">
    <div class="overlay">
    <div class="overlay-content">
        <p style="font-size: 36px;">UNAVAILABLE</p>
      </div>
    </div>
</apex:pageBlock>


<apex:pageBlock rendered="{!IF(oscar != null && NOT(oscar.AMS_Online_Accreditation__r.Ready_for_Accreditation__c) && oscar.Process__c != 'CERTIFICATION.1.0',true,false)}">
    <div class="overlay">
    <div class="overlay-content">
        <p style="font-size: 36px;">LOCKED</p>
        <p>In order to proceed please fill the following fields in the Account Information section: 
            <ul>
                <li>Account Name</li>
                <li>* Specify Legal Status (except for MSO process)</li>
                <li>Location Class</li>
                <li>Country</li>
                <li>Street name and number</li>
                <li>Location Type</li>
                <li>City</li>
                <li>Email (except for MSO process)</li>
                <li>Phone (except for MSO process)</li>
            </ul>
        </p>
      </div>
    </div>
</apex:pageBlock>

<apex:pageBlock rendered="{!IF(oscar != null &&  isAgencyChange &&oscar.Change_effective_as_of__c!=null && oscar.Change_effective_as_of__c > TODAY(),true,false)}">
    <div class="overlay">
    <div class="overlay-content">
        <p style="font-size: 36px;">LOCKED</p>
        <p> This OSCAR should not be processed until the date "Change effective as of" will be reached ({!EffectiveDate})</p>
      </div>
    </div>
</apex:pageBlock>

<apex:form id="oscarForm" rendered="{!IF(oscar != null && oscar.Process__c!=null ,true, false)}">
    <apex:outputPanel id="theProcess">
    <apex:pageBlock >
        <apex:variable var="p" value="{!process[oscar.Process__c]}" />
            <apex:repeat value="{!p.flows}" var="flow">
                <apex:pageBlockSection id="theSection" title="{!$Label[flow.name]}" collapsible="true" columns="3">
                    <apex:repeat value="{!flow.steps}" var="step">
                        <apex:pageBlockSectionItem dataStyle="width: 40px;">
                            <apex:outputPanel >
                                <a id="{!step.name}" class="lightbox" href="#inline{!step.name}" onclick="clicked(this)">
                                    <apex:image value="{!IF((step.isDependent), URLFOR($Resource.AMS_Icons, 'dependent_wrench.jpg'), URLFOR($Resource.AMS_Icons, 'wrench.jpg'))}"/><br></br>
                                </a>
                            </apex:outputPanel>
                        </apex:pageBlockSectionItem>
                        <apex:pageBlockSectionItem dataStyle="width:100%; padding-bottom: 8px;">
                            <apex:outputPanel >
                                <div style="padding-top: {!IF((step.isDependent), '0px', '20px')}">
                                    <a id="{!step.name}" class="lightbox" href="#inline{!step.name}" onclick="clicked(this)">
                                        <apex:outputText value="{!$Label[step.label]}"/>
                                    </a>
                                </div>
                            </apex:outputPanel>
                        </apex:pageBlockSectionItem>
                        <apex:pageBlockSectionItem >
                            <apex:outputPanel >
                                <apex:image value="{!URLFOR($Resource.AMS_Icons, statusIcons[step.name])}" styleClass="hasTooltip"/>
                                <div class="hidden">
                                    <p><b>{!statusLabel[step.name]}</b><br/>
                                       <!--<i>Other info: TO BE DEFINED</i>!--></p> 
                                </div>
                        </apex:outputPanel>
                        </apex:pageBlockSectionItem>
                    </apex:repeat>
                </apex:pageBlockSection>
            </apex:repeat>
        </apex:pageBlock>
    </apex:outputPanel>
    
    
    <apex:variable var="p" value="{!process[oscar.Process__c]}" />
    <apex:repeat value="{!p.flows}" var="flow">
        <apex:repeat value="{!flow.steps}" var="step">
            <div id="inline{!step.name}" style="display:none;">
                <h1><apex:outputText value="{!$Label[step.label]}"/></h1><br/><br/>
                <h2><apex:outputText value="Actions" rendered="{!IF(step.actions.size > 0, true, false)}"/></h2>
                    
                <apex:repeat value="{!step.actions}" var="action">
                    <br/>
                    <apex:commandButton onclick="buildFunctionCall('{!action.functionName}','{!action.args}');" value="{!$Label[action.actionLabel]}" onComplete="refreshTab();"/>
                    <br/>
                </apex:repeat>
                
                <apex:repeat value="{!step.displayFields}" var="sf">
                    <br/><h2>{!stepFieldsData[sf].fieldLabel}</h2>
                    <div id="{!sf}">
                        <apex:inputField value="{!oscar[sf]}" styleClass="inputElem" rendered="{!IF(stepFieldsData[sf].picklistvalues != null, false, true)}"/>
                        
                        <apex:outputPanel rendered="{!$ObjectType.AMS_OSCAR__c.fields[stepFieldsData[sf].fieldApiName].Updateable}">
                            <apex:selectList size="1" rendered="{!IF(stepFieldsData[sf].picklistvalues != null, true, false)}" styleClass="inputElem">
                                <apex:selectOptions value="{!stepFieldsData[sf].picklistvalues}"/>
                            </apex:selectList>
                        </apex:outputPanel>
                        
                        <apex:outputPanel rendered="{!NOT($ObjectType.AMS_OSCAR__c.fields[stepFieldsData[sf].fieldApiName].Updateable)}">
                            <apex:selectList disabled="true" size="1" rendered="{!IF(stepFieldsData[sf].picklistvalues != null, true, false)}" styleClass="inputElem">
                                <apex:selectOptions value="{!stepFieldsData[sf].picklistvalues}"/>
                            </apex:selectList>
                        </apex:outputPanel>
                    </div>
                </apex:repeat>
                
                <br/>
                <apex:commandButton value="Save" onclick="invokeWS(this);" onComplete="refreshTab();"/>
                <apex:commandButton value="Cancel" onClick="lightcase.lightcaseClose();"/>
                <div class="modal"><br/><br/><br/><br/><br/><br/>Please Wait!<!-- Place at bottom of page --></div>
            </div>
        </apex:repeat>
    </apex:repeat>
    </apex:form>


<script>

    var clickedId;

    $(document).ready(function() {

        /* This is basic - uses default settings */
        $(".lightbox").lightcase();
        
    });
    
    function clicked(item) {
        clickedId = "inline" + $(item).attr("id");
    }

    $('.hasTooltip').each(function() {
        $(this).qtip({
            content: {
                text: $(this).next('div') // Use the "div" element next to this for the content
            },
            position: {
                viewport: $(window),
                my: 'top left',
                at: 'bottom left',
            },
            style: {
                classes: 'qtip-light'
            }
        });
    });



</script>



</apex:page>