<apex:page showHeader="false" standardStylesheets="false" lightningStylesheets="true">
    <html>
        <head>
            <apex:stylesheet value="{!URLFOR($Resource.ICG_Resources, '/css/GoogleMapStyles.css')}" />
            <apex:stylesheet value="{!URLFOR($Resource.ICG_Resources, '/css/main.css')}" />
            <apex:stylesheet value="{!URLFOR($Resource.ICG_Resources, '/css/custom.css')}" />
        </head>
        <body>
            <div id="map"></div>
            <script>
            var lexOrigin = 'https://{!$CurrentPage.parameters.lcHost}';
            //Data for Google map
            var data;
            var marker;
            //Send message to LC
            function sendToLC(message) {
                if(typeof(lexOrigin) != 'undefined'){
                    parent.postMessage(message, lexOrigin);
                }
            }
            
            //Receive message from LC
            window.addEventListener("message", function(event) {
                //If page is public (like used in force.com sites) then be careful about the origin
                if (event.origin !== lexOrigin) {
                // Not the expected origin: reject message!
                    return;
                }
                // Handle message
                data = event.data;
                

                if(event.data.loadGoogleMap === true){
                    //Load Google Map Script
                    var script = document.createElement("script");
                    script.src = "https://maps.googleapis.com/maps/api/js?key={!$Setup.ICG_Environment_Variables__c.Google_Maps_Key_OneSource__c}&callback=initMap"; 
                    document.getElementsByTagName("head")[0].appendChild(script);        
                }else{
                    if(event.data.initMap) this.initMap();
                }
            }, false);
            
            //Callback when Google Map is loaded

			function initMap() {
				var map = new google.maps.Map(document.getElementById('map'), {
					zoom: 16,
                    center: {lat: -34.397, lng: 150.644},
                    mapTypeControlOptions: {
                        style: google.maps.MapTypeControlStyle.HORIZONTAL_BAR,
                        position: google.maps.ControlPosition.TOP_RIGHT
                    }
				});
				
				var geocoder = new google.maps.Geocoder();
				geocodeAddress(geocoder, map, data.initialAddress, data.draggable, data.initialization, data.initialGeo);
			}

			function geocodeAddress(geocoder, resultsMap, address, draggable, initialization, initialGeo) {

                if(initialGeo){
                    let location = {
                        lat: initialGeo.Latitude,
                        lng: initialGeo.Longitude
                    }

                    resultsMap.setCenter(location);
                    sendToLC({latitude : location.lat, longitude: location.lng, initialization: initialization})
                    initializeMarker(resultsMap, location, draggable, initialization);
                }
                else{
                    geocoder.geocode({'address': address}, function(results, status) {
						let geoLat = status === 'OK' ? results[0].geometry.location.lat() : 46.2363;
						let geoLong = status === 'OK' ? results[0].geometry.location.lng() : 6.1057;

						let location = {
								lat: geoLat,
								lng: geoLong
							}
						
						resultsMap.setCenter(location);
						sendToLC({latitude : geoLat, longitude: geoLong, initialization: initialization})
						initializeMarker(resultsMap, location, draggable, initialization);
                    });
                }

			}
			function initializeMarker(resultsMap, pos, draggable, initialization){
				marker = new google.maps.Marker({
							map: resultsMap,
							position: pos,
							draggable: draggable,
							animation: google.maps.Animation.DROP,
							title: draggable ? "Drag me!" : ""
						});
						marker.addListener('click', toggleBounce);
						marker.addListener('dragend', function(ev){
							sendToLC({latitude : marker.getPosition().lat(), longitude: marker.getPosition().lng(), initialization: initialization})
						});
			}
			function toggleBounce() {
				if (marker.getAnimation() !== null) {
					marker.setAnimation(null);
				} else {
					marker.setAnimation(google.maps.Animation.BOUNCE);
				}
			}
            
            //Let LC know that VF page been loaded along with it's URL
            //LC will then send the data
            //This is done because LC has no way to know that VF page in iFrame has been loaded, event listener set and ready for data
            var vfHost = "{!LEFT($CurrentPage.URL,FIND('/',$CurrentPage.URL,9))}";
            sendToLC({'state':'LOADED', 'vfHost': vfHost});

            </script>  
            

        </body>
    </html>
</apex:page>