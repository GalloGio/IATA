<!-- This component must be inside of a form -->
<!-- This component was made to to hold the functionality to upload files from staging area and portal -->
<apex:component controller="UploadMultipleFileToAmazonButtonCtrl" allowDML="true" >
	<apex:attribute name="sObjectId" type="Id" required="true" assignto="{!parentId}" description="id of the parent object" />
	<apex:attribute name="AmazonCredential" type="String" required="true" description="credential name to access to the amazon bucket" />
	<apex:attribute name="path" type="String" required="true" assignto="{!folder}" description="destination folder"  />
	<apex:attribute name="uploaderWizard" description="uploader" type="String" required="false" assignTo="{!uploader}" />
    <apex:attribute name="sourceSystem" description="source" type="String" required="false" assignTo="{!source}" />
    <!-- AMSU-154 -->
    <apex:attribute name="sObjectOwnerId" description="SObject owner Id" required="false" assignTo="{!ownerId}" type="Id"/> 
	
    <apex:includeScript value="/soap/ajax/33.0/connection.js"/>
	<apex:includeScript value="/soap/ajax/33.0/apex.js"/>

	<!-- The jQuery must be called on the parent page to avoid conflicts -->
	<!-- <apex:includeScript value="{!$Resource.jquery2_1_4}"/> -->

    <link rel="stylesheet" href="https://ajax.googleapis.com/ajax/libs/jqueryui/1.11.4/themes/smoothness/jquery-ui.css"/>
	<script src="https://ajax.googleapis.com/ajax/libs/jqueryui/1.11.4/jquery-ui.min.js"></script>

	<style>
		.notifyOwner {
			margin-top: 10px;
		}
	</style>

<script>
	var fileIdentifierPick;
	var fileCounter = {
		value: 0,
		reset: function(val) {	value = val; },
		//increase: function() { value++; },
		//decrease: function() { value--; },
		refreshIfEmpty: function() {
			value--;
			if (value==0) refreshList();
		}
	}

	$( document ).ready(function() {
		var fileInput = $("#file-field");

		fileInput.bind("change", function() {
			startLoading();
			uploadFiles(this.files, $('[id$=fileIdentifierPick]').val());
		});
	});

	function uploadFiles(files, fileIdentifierPick) {
        
        try{
        	$( '#dialog' ).dialog('destroy');
        }catch(err){}
        
		fileCounter.reset(files.length); 
		$.each(files, function(i, file) {
			uploadFile(file, fileIdentifierPick);
		});
	}

	function browseFiles() {
		$("#file-field").click();
	}

	function uploadFile(file, fileIdentifierPick) {

		var notifyOwner = $("#notifyOwner:checked");

		UploadMultipleFileToAmazonButtonCtrl.createUploadFile("{!sobjectId}",file.name,file.type, file.size, '{!path}', '{!AmazonCredential}', function(result, event){
			if(event.type == "exception") {
				alert("Exception!!");
				stopLoading();
				fileCounter.refreshIfEmpty();
				return false;
			}
			if(!event.status) {
				alert("Bad status " + event.status);
				stopLoading();
				fileCounter.refreshIfEmpty();
				return false;
			}
			if( ! result["isSuccess"]){
				alert(result["errorMessage"].replace("&#39;","'").replace("&amp", "&").replace(";",""));
				stopLoading();
				fileCounter.refreshIfEmpty();
				return false;
			}
			var amazonCredentials = result;
			var reader = new FileReader();
			reader.readAsArrayBuffer(file);
			reader.onload = function(e) {
				var arrayBuffer = reader.result;
				remoteFunctionPut(amazonCredentials, file, reader.result, fileIdentifierPick);
			};

			/*** AMSU-154 ***/
			if(notifyOwner.length) {
				UploadMultipleFileToAmazonButtonCtrl.notifyOscarOwner("{!sObjectId}", fileIdentifierPick , function(result, event) {
					alert(result);
				});
			}

			$("#notifyOwner").prop("checked", false);
		}, {buffer: true, escape: true, timeout: 120000} );

	}

	function remoteFunctionPut(amazonCredentials, file, fileBody, fileIdentifierPick) {
		var amazonFilePath = amazonCredentials.endpoint+amazonCredentials.bucketName+'/'+amazonCredentials.fullFileNameEncoded;
		sforce.connection.sessionId = "{!$Api.Session_ID}";
		sforce.connection.init("{!$Api.Session_ID}", amazonFilePath);

		//var progressBar;

		var xhr = new XMLHttpRequest();
		
		// salesforce overrides original XMLHttpRequest in IE
		if (!xhr.upload && window.Sarissa && window.Sarissa.originalXMLHttpRequest) {
			xhr = new Sarissa.originalXMLHttpRequest();
		}

		xhr.onreadystatechange = function () {
			if (this.readyState == 4) {
				//fileCounter.refreshIfEmpty(); /* AMSU-135 commented */
				
				var status = this.status;
				if (status == 200) { 
					////progressUpload(100, this.progressBar);
					//uploadFile(file);
				} else {
					if (this.responseText) {
						getResponseFromXML(this.responseText); 
						//uploadFile(file);
					} else {
						var message = '';
						if (this.statusText) {
							message = 'Status: '+this.status+'. Error: '+this.statusText; 
						}
						else if (this.responseText) {
							message = 'Status: '+this.status+'. Error: '+this.responseText;
						}
						else {
							message = 'Status:'+this.status+'. Error: Unknown error.'; 
						}
					}
				}
			}
		};

		xhr.open("PUT", amazonFilePath);

		xhr.setRequestHeader("Cache-Control", "no-cache");
		xhr.setRequestHeader("Authorization",amazonCredentials.authorization);
		xhr.setRequestHeader("X-Amz-Date",amazonCredentials.timestamp);
		xhr.setRequestHeader("Content-Type",file.type+';charset=UTF-8');

		xhr.send(fileBody);

		callToCreateAmazonFileObject(file, amazonCredentials.fullFileName, fileIdentifierPick);
	}

	function getResponseFromXML(response) {
		parser = new DOMParser();
		var xmlDoc = parser.parseFromString(response, "text/xml");
		if (xmlDoc.getElementsByTagName("Message")[0].childNodes[0].nodeValue) {
			alert ('Error. Message from Amazon S3: '+xmlDoc.getElementsByTagName("Message")[0].childNodes[0].nodeValue);
			stopLoading();
		}
	}

 	function callToCreateAmazonFileObject(file, path, fileIdentifierPick) {
		if(fileIdentifierPick == null){
            fileIdentifierPick = '';
        }
 		UploadMultipleFileToAmazonButtonCtrl.createAmazonFileObject(path, file.size,"{!sobjectId}", "{!uploader}", fileIdentifierPick, "{!source}", function(result, event){ 
 			/* AMSU-135 force refresh on oscar process attachments list*/
 			fileCounter.refreshIfEmpty();
 			if(typeof(refreshList) == 'function') { console.log('refreshList -> function'); refreshList();} else {console.log('refreshList -> unknown');}
 		});
 	}

    function uploadAmsFile() {

        if(validateInputs()) {
            
            browseFiles();
        }else{
                
            alert('Please fill all the information.');
        }
    }
        
    function validateInputs() {

        return $('[id$=fileIdentifierPick]').val() != null && $('[id$=fileIdentifierPick]').val() != '';
    }
    
    function openDialog() {

        $('[id$=fileIdentifierPick]').prop('selectedIndex',0);
        $( '#dialog' ).dialog({modal: true, close: function( event, ui ) {$( '#dialog' ).dialog('destroy');}});
    }
</script>

	<input id="file-field" multiple="true" name="file" style="display: none;" type="file" />
	<apex:outputPanel layout="none" rendered="{!uploader != 'AMS_File'}">
    	<input class="btn" id="btnUpload" value="{!$Label.Upload_File}" type="submit" onclick="browseFiles(); return false;" />
    </apex:outputPanel>
	
    <apex:outputPanel layout="none" rendered="{!uploader == 'AMS_File'}">
        <apex:commandButton value="{!$Label.Select_File}" title="Select File" onclick="openDialog(); return false;" immediate="true" />

        <div id="dialog" style="display: none;" title="{!$Label.Select_File}">
            {!$ObjectType.AmazonFile__c.fields.File_Identifier_picklist__c.Label}:&nbsp;<apex:inputField id="fileIdentifierPick" value="{!amazonFile.File_Identifier_picklist__c}"/>
            <input class="btn" id="btnUpload" value="{!$Label.Upload_File}" type="submit" onclick="uploadAmsFile(); return false;" />
            <apex:outputPanel styleClass="notifyOwner" rendered="{!IF(AND(source == 'Internal', NOT(ISBLANK(ownerId)), $User.Id != ownerId), true, false)}" layout="block">            	
            	<input id="notifyOwner" type="checkbox"/>
            	<label for="notifyOwner">{!$Label.AMS_Notify_OSCAR_Owner}</label>
        	</apex:outputPanel>
        </div>
	</apex:outputPanel>
</apex:component>