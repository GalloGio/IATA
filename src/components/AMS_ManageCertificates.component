<apex:component controller="AMS_ManageCertificatesController" allowDML="true">
	<apex:attribute name="caseId" description="Renewal Case Id" type="Id" assignTo="{!certCaseId}"/>
	<style>
		.dateFormat {
			display:none;
		}

		.certificates {
			word-wrap: break-word;
			overflow: hidden;
			white-space: normal;
			width: 100%;
		}

		.staffList td {
			padding: 0px;
		}

		.panel {
			margin-bottom: 0px;
			border-bottom-left-radius: 0px;
			border-bottom-right-radius: 0px;
		}

		.tableBorder {
			border: 1px solid #3073ac;
			margin-bottom: 20px;
		}
		.noBottomMargin {
			margin-bottom: 0px;
		}

		.tableBorder th {
			border-right-style: none;
		}
	</style>

	<script>
		var mapCasePerStaff;

		function validateFile(file) {
			if(!file) {
				alert("Please select a file to upload.");
				return false;
			}

			if(file.size > {!fileConfig.maxFileSize}) {
				alert("Filesize is too big.")
				return false;
			}

			if(file.name.length > 80) {
				alert('Filename is too long (Max. 80 characters)');
				return false;
			}

			var acceptFileTypes = {!fileConfig.allowedExtensions};
			if(!acceptFileTypes.test(file.type)) {
				alert('{!$Label.ISSP_File_Extension}');
				return false;
			}	

			return true;
		}

		function validateSubmission() {
			var isValid = true;
			$(".staffList").find('input').each(function(i,e) {
				if(!e.value) {
					isValid = false;
					return false;
				}
			});

			var fileNames = [];
			var listOfNames = '';
			$('.certificates').each( function(index, value) { 
				var file = value.files[0];
				if(!validateFile(file)){
					isValid = false;
					return false;
				}

				var fn = file['name'];
                fn = fn.replace(/ /gi,'_');
                fn = fn.replace(/'|{|}|[|]|#|&/gi,'');

                listOfNames += fn + ':';

                /* validate duplicates */
				if(fileNames.indexOf(fn) === -1) {					
					fileNames.push(fn);
				} else {
					alert("All files submited must have a unique name.");
					isValid = false;
					return false;
				}
			});

			if(isValid) {
				$("input[id*='file_names']").val(listOfNames);
			}

			return isValid;
		}

		function uploadCertificates() {			
			var nrOfCertificates = $('.certificates').length;

			if(nrOfCertificates != 0) {
				$("span[id*='WaitingStatus.start']").show();
			}

			$('.certificates').each( function(index, value) { 
				var file = value.files[0];
				var caseId = mapCasePerStaff[value.id.split("-")[1]];				

				var fd = new FormData();
				var fn = file['name'];
                fn = fn.replace(/ /gi,'_');
                fn = fn.replace(/'|{|}|[|]|#|&/gi,'');				              

				fd.append('key', '500/'+caseId+'/'+fn);
				fd.append('acl', 'private');
				fd.append('AWSAccessKeyId', '{!fileConfig.accessId}');
				fd.append('success_action_status', '201');
				fd.append('policy', '{!fileConfig.policy}');
				fd.append('signature','{!fileConfig.signedPolicy}');
				fd.append("file",file);

				$.ajax({
					type : 'POST',
					url : '{!fileConfig.amazonURL}',
					data : fd,
					async: false,
					processData: false,  // tell jQuery not to convert to form data
					contentType: false,  // tell jQuery not to set contentType
					success : function(data) {						
						Visualforce.remoting.Manager.invokeAction(
							'{!$RemoteAction.AMS_ManageCertificatesController.createAmazonFile}',
							caseId, fn, 'DGR_CERT', file.size, function(result, event) {
								console.log(event.status);
								if(event.status) {
									nrOfCertificates--;
									if(nrOfCertificates == 0) {
										$("span[id*='WaitingStatus.start']").hide();
										location.reload();
									}
								} else {
									$("span[id*='WaitingStatus.start']").hide();
									alert('{!$Label.ISSP_ANG_GenericError}');
									location.reload();
								}
							},
							{escape: true}
						);	
					},
					error : function(data) {
						$("span[id*='WaitingStatus.start']").hide();
						console.log(data);
						alert('{!$Label.ISSP_ANG_GenericError}');
						location.reload();
					}
				});
			});
		}

		function cancel() {
			$("[id$='theForm']").trigger("reset");
			refreshList();
			if("{!ISNULL(caseId)}" == "true") {
				$('#cert_popup').modal('hide');
			}
		}

		function saveOnComplete(hasError, errorMessage, cases) {
			console.log(hasError);
			console.log(errorMessage);
			mapCasePerStaff = JSON.parse(cases);
			if(hasError == "true") {
				alert(errorMessage);
			} else {
				uploadCertificates();
				refreshList();	
			}	
		}
	</script>

	<c:ISSP_WaitingStatus/>
	<apex:form id="theForm">
		<apex:inputHidden id="file_names" value="{!dataConfig.fileNames}"/>

		<apex:actionFunction reRender="theForm" name="loadSelectedStaff" action="{!dataConfig.loadTrainnedStaff}" 
			status="WaitingStatus">
			<apex:param name="ids" assignTo="{!dataConfig.trainnedStaffIds}" value=""/>
			<apex:param name="accountId" assignTo="{!dataConfig.accountId}" value=""/>
		</apex:actionFunction>
		<apex:actionFunction reRender="theForm" name="refreshList" action="{!refreshList}" 
			status="WaitingStatus" 
			immediate="true"/>

		<apex:pageBlock>
			<apex:outputPanel id="empty-div" layout="none"/>
			<apex:outputText styleClass="bg-info" style="font-weight:bold" escape="false" value="{!$Label.ISSP_AMS_Case_Attach_Limit}"/>
			<br/>
			<apex:pageBlockButtons location="{!IF(ISNULL(caseId), 'bottom', 'top')}">
				<apex:commandButton reRender="theForm" rendered="{!NOT(dataConfig.editMode)}" 
					action="{!enableEditMode}" 
					value="Edit" 
					status="WaitingStatus" 
					styleClass="{!IF(ISNULL(caseId), 'btn btn_iata_primary', '')}"/>
				<apex:commandButton action="{!redirectToTrainedStaffPage}" immediate="true" status="WaitingStatus" 
					rendered="{!AND(NOT(dataConfig.editMode), dataConfig.isPortalAdmin, NOT(ISNULL(caseId)))}" 
					value="{!$Label.AMS_Add_Certificate}"/>
				<apex:commandButton reRender="empty-div" rendered="{!dataConfig.editMode}" 
					onclick="if(!validateSubmission()) {return false;}"
					action="{!updateCertificates}" 
					oncomplete="saveOnComplete('{!dataConfig.hasError}', '{!dataConfig.errorMessages}', '{!dataConfig.mapCasePerStaffStr}');"
					value="Save" status="WaitingStatus" 
					styleClass="{!IF(ISNULL(caseId), 'btn btn_iata_primary', '')}"/>
				<apex:commandButton reRender="theForm" rendered="{!AND(dataConfig.editMode, ISNULL(caseId))}" 
					action="{!addStaffMember}" value="Add Person" 
					styleClass="{!IF(ISNULL(caseId), 'btn btn_iata_primary', '')}" status="WaitingStatus"/>
				<apex:commandButton reRender="theForm" action="{!cancel}" styleClass="{!IF(ISNULL(caseId), 'btn btn_iata_primary', '')}" 
					onclick="cancel();" value="Cancel" rendered="{!dataConfig.editMode}" immediate="true"/>
			</apex:pageBlockButtons>
			<apex:outputPanel layout="block" styleClass="{!IF(ISNULL(caseId), 'toprow', '')}">
				<apex:outputPanel layout="none" rendered="{!ISNULL(caseId)}">
					<br/>
					<div class="panel panel-primary">
						<div class="panel-heading head_panel_green">
							<h3 class="panel-title"><b>{!$Label.AMS_DGR_Certificate}</b></h3>
						</div>
					</div>
				</apex:outputPanel>
				<apex:outputPanel styleClass="{!IF(ISNULL(caseId), 'tableBorder', '')}" layout="block">
					<apex:pageBlockTable  id="staffList" 
						styleClass="table-hover table table-condensed table-responsive noBottomMargin" 
						value="{!dataConfig.trainedStaffList}" var="elem">
						<apex:column headerValue="{!$ObjectType.AMS_Agency_Regulation__c.fields.First_Name__c.Label}" width="12.5%">
							<apex:outputField value="{!elem.accContact.First_name__c}" 
								rendered="{!OR(NOT(dataConfig.editMode),NOT(elem.isNewContact))}"/>
							<apex:inputField required="true" value="{!elem.accContact.First_name__c}" 
								rendered="{!AND(dataConfig.editMode,elem.isNewContact)}"/>
						</apex:column>
						<apex:column headerValue="{!$ObjectType.AMS_Agency_Regulation__c.fields.Last_Name__c.Label}" width="12.5%">
							<apex:outputField value="{!elem.accContact.Last_name__c}" 
								rendered="{!OR(NOT(dataConfig.editMode),NOT(elem.isNewContact))}"/>
							<apex:inputField required="true" value="{!elem.accContact.Last_name__c}" 
								rendered="{!AND(dataConfig.editMode,elem.isNewContact)}"/>
						</apex:column>
						<apex:column headerValue="{!$ObjectType.AMS_Agency_Regulation__c.fields.Email__c.Label}" width="12.5%">
							<apex:outputField value="{!elem.accContact.Email__c}" 
								rendered="{!NOT(dataConfig.editMode)}"/>
							<apex:inputField required="true" value="{!elem.accContact.Email__c}" 
								rendered="{!dataConfig.editMode}"/>
						</apex:column>
						<apex:column headerValue="{!$ObjectType.AMS_Agency_Regulation__c.fields.Position__c.Label}" width="12.5%">
							<apex:outputField value="{!elem.accContact.Position_trained_staff__c}" 
								rendered="{!NOT(dataConfig.editMode)}"/>
							<apex:inputField required="true" value="{!elem.accContact.Position_trained_staff__c}" 
								rendered="{!dataConfig.editMode}"/>
						</apex:column>
						<apex:column headerValue="{!$ObjectType.AMS_Agency_Regulation__c.fields.Issuer__c.Label}" width="12.5%">
							<apex:outputField value="{!elem.accContact.Certificate_Issuer__c}" 
								rendered="{!NOT(dataConfig.editMode)}"/>
							<apex:inputField required="true" value="{!elem.accContact.Certificate_Issuer__c}" 
								rendered="{!dataConfig.editMode}"/>
						</apex:column>
						<apex:column headerValue="{!$ObjectType.AMS_Agency_Regulation__c.fields.Issued_on__c.Label}" width="12.5%">
							<apex:outputField value="{!elem.accContact.Certificate_Issued_on__c}" 
								rendered="{!NOT(dataConfig.editMode)}"/>
							<apex:inputField value="{!elem.accContact.Certificate_Issued_on__c}" styleClass="dateInput" showDatePicker="true" 
								rendered="{!AND(dataConfig.editMode,NOT(ISNULL(caseId)))}"/>
							<apex:inputField value="{!elem.accContact.Certificate_Issued_on__c}" styleClass="dateInput" showDatePicker="false" 
								rendered="{!AND(dataConfig.editMode,ISNULL(caseId))}" type="date"/>
						</apex:column>
						<apex:column headerValue="{!$ObjectType.AMS_Agency_Regulation__c.fields.Expiry_Date__c.Label}" width="12.5%">
							<apex:outputField value="{!elem.accContact.Valid_until__c}" 
								rendered="{!NOT(dataConfig.editMode)}"/>
							<apex:inputField value="{!elem.accContact.Valid_until__c}" styleClass="dateInput" showDatePicker="true" 
								rendered="{!AND(dataConfig.editMode,NOT(ISNULL(caseId)))}"/>
							<apex:inputField value="{!elem.accContact.Valid_until__c}" styleClass="dateInput" showDatePicker="false" 
								rendered="{!AND(dataConfig.editMode,ISNULL(caseId))}" type="date"/>
						</apex:column>
						<apex:column headerValue="{!$Label.AMS_UploadFile_Certificate}" width="12.5%">
							<apex:outputPanel layout="none" rendered="{!NOT(dataConfig.editMode)}">
								<input type="file" disabled="disabled" name="certificate-{!elem.index}" 
									id="certificate-{!elem.index}" class="certificates"/>
							</apex:outputPanel>
							<apex:outputPanel layout="none" rendered="{!dataConfig.editMode}">
								<input type="file" name="certificate-{!elem.index}" 
									id="certificate-{!elem.index}-{!elem.caseId}" class="certificates"/>
							</apex:outputPanel>
						</apex:column>
					</apex:pageBlockTable>
				</apex:outputPanel>
			</apex:outputPanel>
		</apex:pageBlock>
	</apex:form>
</apex:component>