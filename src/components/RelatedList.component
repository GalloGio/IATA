<apex:component controller="RelatedListController" allowDML="true">
    <apex:attribute name="massUpdateInputs" type="Boolean" assignTo="{!massUpdateValues}" default="false" description="If set to true a new section is rendered where the editable fields can be edited for several rows at a time."/>
    <apex:attribute name="defaultEditAll" type="Boolean" assignTo="{!defaultEditMode}" default="false" description="If set to true all defined fields are editable inline when page is loaded."/>
    <apex:attribute name="editableFields" type="String[]" assignTo="{!updatableFields}" description="List collection variable containing the API field names that will be editable."/>
    <apex:attribute name="editableFieldsCSV" type="String" assignTo="{!csvEditableFields}" description="Comma separated list of API field names that will be editable inline. If defined, this will override the editableFields attribute."/>
    <apex:attribute name="fieldsCSV" type="String" assignTo="{!csvFields}" description="Comma separated list of API field names that will be displayed in the relatedList. If defined, this will override the fieldsList attribute."/>
    <apex:attribute name="fieldsList" type="String[]" assignTo="{!listFields}" description="List collection variable containing the API field names that will be displayed in the related list."/>
    <apex:attribute name="filter" type="string" assignTo="{!filterCriteria}" description="Additional filter criteria applied to the objects returned. This shoud not start with 'where' keyworld, simply 'Active = true AND ...'."/>
    <apex:attribute name="hideActionLinkDel" type="Boolean" description="If set to true this will hide the Action link for delete record in the first column."/>
    <apex:attribute name="hideActionLinkEdit" type="Boolean" default="false" description="If set to true this will hide the Action link for edit record in the first column."/>
    <apex:attribute name="hideButtons" type="Boolean" description="Hide page block buttons, buttons will not be displayed if attribute is set to true."/>
    <apex:attribute name="objectName" type="String" assignTo="{!objectApiName}" description="The API name of the object representing this related list" required="true"/>
    <apex:attribute name="orderByFieldName" type="String" assignTo="{!orderByFieldNameOnLoad}" description="List of records will be ordered by this field on initial load of the related list."/>
    <apex:attribute name="pageSize" type="Integer" assignTo="{!pageSetSize}" description="Sets the number of records in each page set."/>
    <apex:attribute name="parentFieldId" type="Id" assignTo="{!parentId}" description="The 15 or 18 digit Id of the parent record for this related list." required="true"/>
    <apex:attribute name="parentFieldName" type="String" assignTo="{!parentFieldApiName}" description="The API name of the relationship field for the related list. For example: AccountId on Opportunity object." required="true"/>
    <apex:attribute name="sortDirection" type="String" assignTo="{!sortOrder}" description="Initial sort order of the related list on load. Valid values are 'asc' and 'desc'."/>
    <apex:attribute name="updateAllOrNone" type="Boolean" assignTo="{!isAllOrNone}" default="true" description="Define if changes in records are persisted or not if one or more errors occur while updating other records in the same action."/>

    <!-- Relative URLS using the '$Action.' notation cannot be dynamic as there is no way to merge the object name in to the Action method, this must be defined by user of this component -->
    <apex:attribute name="urlForNewRecord" type="String" description="Please define the URL for new record creation. For example: '{!URLFOR($Action.Opportunity.New,Account.Id)}'." required="false"/>

    <apex:includeScript value="{!$Resource.jquery2_1_4}"/>

    <script>

        function updateSelected(className, value) {

            // loop all rows
            $(".targetTable tbody tr").each(function() {
                // on a row, find the checkbox and change the values if it's checked
                if($(this).find(".selectedCheckbox").prop("checked")) {
                    $(this).find("."+className).val(value);
                }
            });
        }

        function selectAll() {

            // loop all rows
            $(".targetTable tbody tr").each(function() {
                // on a row, find the checkbox and change the values to checked
                $(this).find(".selectedCheckbox").prop("checked", true);
            });
        }

        function redirectNew() {
            window.location.href = "{!urlForNewRecord}";

            return false;
        }
    </script>

    <apex:pageBlock title="{!objectDescribe.LabelPlural}" mode="detail" id="pageBlock">
        <apex:pageBlockButtons location="top" rendered="{!IF(hideButtons,false,true)}">
            <!-- <apex:outputLink value="{!urlForNewRecord}" rendered="{!showNewButton}" styleClass="btn commandButton">New {!objectDescribe.label}</apex:outputLink> -->
            <apex:outputPanel layout="none" rendered="{!IF(OR(ISBLANK(urlForNewRecord),NOT(ShowNewButton)),false,true)}">
                <input type="button" onclick="return redirectNew();" class="btn" value="New {!objectDescribe.label}"/>
            </apex:outputPanel>

            <!-- Show 'Edit All' button if the updatable fields are defined And showUpdateButton (user has permissions to edit) is set to true -->
            <apex:commandButton value="Edit All" action="{!changeInlineEditMode}" rendered="{!AND(NOT(ISNULL(updatableFields)),updatableFields.size > 0,showUpdateButton, NOT(inlineEditMode), NOT(defaultEditAll))}" rerender="pageBlock" styleClass="btn commandButton"></apex:commandButton>
            <!-- Show 'Save' and 'Cancel' buttons if inlineEditeMode is set to true -->
            <apex:commandButton value="Save" onclick="if(!confirm('Are you sure?')) return false;" action="{!updateRecords}" rendered="{!inlineEditMode}" rerender="pageBlock" styleClass="btn commandButton"></apex:commandButton>
            <apex:commandButton value="Close" action="{!cancelChanges}" rendered="{!inlineEditMode}" styleClass="btn commandButton"></apex:commandButton>
            <apex:commandButton value="Select All" onclick="selectAll();" reRender="false"></apex:commandButton>
        </apex:pageBlockButtons>

        <!-- Output error/warning messages here -->
        <apex:pageMessages />

        <!-- Only show table if there are records returned -->
        <!-- Mass Updater -->
        <apex:pageBlock title="Mass Update Values" rendered="{!massUpdateValues && inLineEditMode}">
            <apex:pageBlockTable title="Mass Update Values" value="{!topRecord}" var="r" rendered="{!OR(NOT(ISNULL(records)),records.size > 0)}">
                <!-- Loop through list of field names to dynamically render the correct columns -->
                <apex:repeat value="{!updatableFields}" var="fld">
                    <!-- Set correct style alignment based on values stored in fieldAlignMap -->
                    <apex:column headerClass="{!fieldAlignMap[fld]}" styleClass="{!fieldAlignMap[fld]}">
                        <apex:facet name="header">
                            <apex:outputPanel layout="block" styleClass="clickableHeader">
                                <!-- Display header value valued on nameLabelMap ie: (AccountId -> Acount) -->
                                <apex:outputText value="{!nameLabelMap[fld]}"/>
                            </apex:outputPanel>
                        </apex:facet>
                        <!-- Render field as an Output field if it's not updatable or input field if it's updatable -->
                        <apex:inputField value="{!r[fld]}" onchange="updateSelected('{!fld}', this.value);"/>
                    </apex:column>
                </apex:repeat>
            </apex:pageBlockTable>
        </apex:pageBlock>
        <!-- Records -->
        <apex:pageBlockTable styleClass="targetTable" title="Records" value="{!records}" var="r" rendered="{!OR(NOT(ISNULL(records)),records.size > 0)}">
            <apex:column headerValue="Action" rendered="{!IF(AND(hideActionLinkEdit,hideActionLinkDel),false,true)}" styleClass="actionColumn">
                <apex:outputPanel layout="None"  rendered="{!IF(hideActionLinkEdit,false,true)}" >
                    <apex:outputLink value="/{!r.Id}/e?retURL={!$CurrentPage.url}" styleClass="actionLink">Edit</apex:outputLink>
                </apex:outputPanel>
                <apex:outputPanel layout="None" rendered="{!IF(OR(hideActionLinkEdit,hideActionLinkDel),false,true)}" >
                    <apex:outputText styleClass="actionLink"></apex:outputText> |&nbsp;
                </apex:outputPanel>
                <apex:commandLink value="Del" onclick="if(!confirm('Are you sure?')) return false;" action="{!deleteRecord}" rendered="{!IF(hideActionLinkDel,false,true)}" rerender="pageBlock" styleClass="actionLink">
                    <apex:param name="deleteRecordId" assignTo="{!deleteRecordId}" value="{!r.id}"/>
                </apex:commandLink>
            </apex:column>

            <apex:column headerValue="Select" rendered="{!massUpdateValues && inLineEditMode}">
                <input id="{!r['Id']}" class="selectedCheckbox" type="checkbox" value="false"/>
            </apex:column>

            <!-- Loop through list of field names to dynamically render the correct columns -->
            <apex:repeat value="{!fieldNames}" var="fld">
                <!-- Set correct style alignment based on values stored in fieldAlignMap -->
                <apex:column headerClass="{!fieldAlignMap[fld]}" styleClass="{!fieldAlignMap[fld]}">
                    <apex:facet name="header">
                        <apex:outputPanel layout="block" styleClass="clickableHeader">
                            <!-- Add action to support to header so the entire header is clickable  -->
                            <apex:actionSupport event="onclick" action="{!sortByField}" rerender="pageBlock">
                                <apex:param name="sortByField" value="{!fld}" assignTo="{!sortByField}"/>
                            </apex:actionSupport>

                            <!-- Display header value valued on nameLabelMap ie: (AccountId -> Acount) -->
                            <apex:outputText value="{!nameLabelMap[fld]}"/>

                            <!-- Render the correct asc desc arrows based on current sort defined by user clicks on header -->
                            <apex:outputPanel id="directionIcon" rendered="{!sortByField = fld}">
                                <apex:image styleClass="imageDesc" value="/s.gif" rendered="{!fieldSortDirectionMap[fld] = 'desc'}"/>
                                <apex:image styleClass="imageAsc" value="/s.gif" rendered="{!fieldSortDirectionMap[fld] = 'asc'}"/>
                            </apex:outputPanel>
                        </apex:outputPanel>
                    </apex:facet>
                    <!-- Render field as an Output field if it's not updatable or input field if it's updatable -->
                    <apex:outputField styleClass="{!fld}" value="{!r[fld]}" rendered="{!OR(NOT(updatableFieldsMap[fld]),NOT(inlineEditMode))}"/>
                    <apex:inputField styleClass="{!fld}" value="{!r[fld]}" rendered="{!AND(updatableFieldsMap[fld],inLineEditMode)}"/>
                </apex:column>
            </apex:repeat>
            <apex:column headerValue="Errors" headerClass="alignRight" rendered="{!hasErrors}" styleClass="errorColumn">
                <apex:outputLabel value="{!errorMap[r.id]}" styleClass="errorColumn"/>
            </apex:column>
        </apex:pageBlockTable>

        <!-- Show notice if related list has no records -->
        <apex:outputPanel layout="block" styleClass="noRecordsFound" rendered="{!records.size == 0}">
            No records to display
        </apex:outputPanel>

        <!-- Add pagination toolbar to bottom of table if pageSize is defined -->
        <apex:outputPanel layout="block" styleClass="paginatorWrap" rendered="{!AND(records.size > 0, NOT(ISNULL(pageSize)))}">
            <div class="paginator">
                <span class="prevNextLinks">
                    <!-- First Button -->
                    <span class="prevNext">
                        <!-- Show first button if page set has previous page-->
                        <apex:commandLink value="" action="{!ssc.first}" rendered="{!ssc.pageNumber != 1}" rerender="pageBlock" title="First">
                            <img class="first" src="/s.gif" alt="" />
                        </apex:commandLink>

                        <!-- Show disabled first button page set is on page 1-->
                        <apex:outputPanel rendered="{!NOT(ssc.hasPrevious)}">
                            <img class="firstoff" src="/s.gif" alt="" />
                        </apex:outputPanel>
                    </span>

                    <!-- Previous Button -->
                    <span class="prevNext">
                        <!-- Show previous button page set has previous page-->
                        <apex:commandLink value="" action="{!ssc.previous}" rendered="{!ssc.hasPrevious}" rerender="pageBlock">
                            <img class="prev" src="/s.gif" alt="" />Previous
                        </apex:commandLink>

                        <!-- Show disabled first button page set is on page 1-->
                        <apex:outputPanel rendered="{!NOT(ssc.hasPrevious)}">
                            <img class="prevoff" src="/s.gif" alt="" />Previous
                        </apex:outputPanel>
                    </span>

                    <!-- Next Button -->
                    <span class="prevNext">
                        <!-- Show next button if page set has next -->
                        <apex:commandLink value="" action="{!ssc.next}" rendered="{!ssc.hasNext}" rerender="pageBlock">
                            Next<img class="next" alt="Next" title="Next" src="/s.gif" />
                        </apex:commandLink>

                        <!-- Show disabled next button if page set has no next -->
                        <apex:outputPanel rendered="{!NOT(ssc.hasNext)}">
                            Next<img class="nextOff" alt="Next" title="Next" src="/s.gif" />
                        </apex:outputPanel>
                    </span>

                    <!-- Last Button -->
                    <span class="prevNext">
                        <!-- Show last button if page set has next -->
                        <apex:commandLink value="" action="{!ssc.last}" rendered="{!ssc.hasNext}" rerender="pageBlock" title="Last">
                            <img class="last" src="/s.gif" alt="" />
                        </apex:commandLink>

                        <!-- Show disabled last button if page set has no next -->
                        <apex:outputPanel rendered="{!NOT(ssc.hasNext)}">
                            <img class="lastoff" src="/s.gif" alt="" />
                        </apex:outputPanel>
                    </span>
                </span>
                <span class="right">
                    <!-- allow user to input page number of page set for direct navigation -->
                    Page&nbsp;
                    <apex:inputText value="{!ssc.pageNumber}" styleClass="pageInput">
                        <apex:actionSupport event="onchange" rerender="pageBlock"/>
                    </apex:inputText>of {!CEILING(ssc.ResultSize / ssc.pageSize)}
                </span>
            </div>
        </apex:outputPanel>
    </apex:pageBlock>

    <!-- Inline styles for sake of simplicity and review of this entry. Should be in external style sheet in production -->
    <!-- Some styles reference salesforce.com img urls, also for simplicity of submission. Production use should probably store these
    imgs separately in static resources unless you are comfortable use sfdc resources -->
    <style>
        .alignLeft{
            text-align: left;
        }
        .alignRight{
            text-align: right;
        }
        .clickableHeader{
            cursor: pointer;
            width: 100%;
        }
        .commandButton{
            margin: 1px;
            padding: 0 3px;
            text-decoration: none;
        }
        .paginatorWrap{
            background: url("/img/alohaSkin/listFooter.png") repeat-x scroll 0 0 #F2F2F2;
            border: 1px solid #EAEAEA;
            background-color: #F3F3F3;
            border-top: 1px solid #FFFFFF;
            padding: 5px;
        }
        .noRecordsFound{
            border: 1px solid #D4DADC;
            padding: 4px;
        }
        .imageAsc{
            background: url("/img/alohaSkin/sortArrows.png") no-repeat scroll left top transparent;
            height: 8px;
            margin: 0 5px;
            vertical-align: -1px;
            width: 7px;
        }
        .imageDesc{
            background: url("/img/alohaSkin/sortArrows.png") no-repeat scroll 0px -12px transparent;
            background-repeat: no-repeat;
            height: 8px;
            margin: 0 5px;
            vertical-align: -1px;
            width: 7px;
        }
        .errorColumn{
            color:#d74c3b;
            font-weight: bold;
        }


    </style>
</apex:component>
